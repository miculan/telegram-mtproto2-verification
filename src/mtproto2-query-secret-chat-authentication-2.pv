(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: <1s
 *
 *)

(*
 * If an (honest) initiator negotiates a key k to chat with Bob, and an
 * (honest) responder accepts a key k to chat with Alice, then the initiator is
 * Alice and the responder is Bob.
 *
 * NOTE: to efficiently prove this and the following queries, set preciseActions = false.
 * With preciseActions = false, this and the following queries can be proved in ~7s.
 *)
query i,i': ChatID, a,b: Z, I,R: Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, Bob, k))
  && event(ResponderAcceptsEncryptedChat(b, i', Alice, R, k))
  ==> (I = Alice && R = Bob)
  || (event(OutOfBandKeyComparisonSkipped(a, I, k)) && event(OutOfBandKeyComparisonSkipped(b, R, k)))
  || (event(ClientChecksDHConfig(i, I, false)) && event(ClientChecksDHConfig(i', R, false))).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
  )

