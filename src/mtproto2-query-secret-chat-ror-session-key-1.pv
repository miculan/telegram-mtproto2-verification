(*
 * MTProto 2.0: Secret chats
 *
 * Expected time to run this script: ~10s
 *)

(* set ignoreTypes = false. *)

let RealOrRandomSessionKey() =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, sessionKey) in
  (*
   * If the secret chat is between honest parties, and the key is strong and
   * validated by the two parties, then the key should be indistinguishable
   * from random.
   *)
  if (iUser = Alice || iUser = Bob ) && (rUser = Alice || rUser = Bob) && sessionKey <> group2sess(BAD) then
    new random: G;
    out(io, choice[sessionKey, group2sess(random)]).
(* Expected result: cannot be proved *)
(*
 * NOTE: the derivation does not appear to indicate a counterexample, but
 * intuitively, the observational equivalence should not hold, because the
 * attacker (the server) could distinguish the real key from a random key by
 * comparing the fingerprint of the value with the fingerprint transmitted with
 * the last message of the secret chat protocol. The trace reported from the
 * query on the exponents shows that.
 *)


(* Main *)

(*
 * Needed to bootstrap the secret chat' processes.
 *)
let Init() =
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = false in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | RealOrRandomSessionKey()
  )

