(*
 * MTProto 2.0: Creating an authorization key.
 *
 * Model for the protocol used to create long-term keys shared between a client
 * and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/auth_key
 *
 * Expected time to run this script: ~1m30s
 *)

(*
 * There is authentication of the server to the client (even for a server
 * reusing its server nonce). All the disjuncts in the following query are
 * necessary.
 *)
query sk: PrivKey, cID: Principal, sID: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_s: G;
  inj-event(ClientReceivesDHParameters(cID, sID, nc, ns, nk, p, g, g_s))
  ==> inj-event(ServerSendsDHParameters(sID, nc, ns, nk, p, g, g_s))
  ||  event(CompromisedRSAKey(sk))
  ||  event(ClientUsesPredictableNk(true))
  ||  event(CompromisedNonce(nk))
  ||  event(ForgedServerIdentity(sID)).
(* ✔︎ Expected result: true *)


(* Main *)
process
  (0
    | !GenGoodDHParameters()
    | !GenBadDHParameters()
    | !GenRandomServerNonce()
    | !GenFixedServerNonce()
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, true)
    | !ForgeServerIdentity()
    | !LeakRSAKey()
    | !PostCompromiseRSAKey()
    | !LeakNk()
    | !PostCompromiseNk()
    | !PostCompromiseAuthKey()
  )

