(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: ~2min
 *)

(*
 * If a client X (one of I or R) receives a message m encrypted with a session
 * key k in a chat session i initiated by I with responder R, then exactly one
 * such message was sent by client Y (one of I or R), unless the clients skip
 * some mandatory checks.
 *
 * NOTE: the message may be sent in the correct session (the one initiated by I
 * with R), but it might also be sent from a parallel session initiated by R
 * with I (the second disjunct is necessary). This is because the attacker may
 * act as a MitM responder in two parallel sessions (one initiated by Alice
 * with Bob and another initiated by Bob with Alice), and forward messages from
 * one session to the other.
 *)
query xPID, yPID: ProcessID, i, i': ChatID, X, Y, I, R: Principal, k: SessionKey, m: bitstring;
  inj-event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> inj-event(ClientSendsMessageToEncryptedChat(yPID, Y, i', I, R, k, m))
  ||  inj-event(ClientSendsMessageToEncryptedChat(yPID, Y, i', R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(xPID, X, k)) && event(OutOfBandKeyComparisonSkipped(yPID, Y, k)))
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✔︎ Expected result: true *)

(* Similar to the above *)
query xPID, yPID, iPID, rPID: ProcessID, i, i': ChatID, X, Y, I, R: Principal, k: SessionKey, m: bitstring;
  inj-event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> inj-event(ClientSendsMessageToEncryptedChat(yPID, Y, i', I, R, k, m))
  ||  inj-event(ClientSendsMessageToEncryptedChat(yPID, Y, i', R, I, k, m))
  ||  event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  ||  event(OutOfBandKeyComparisonSkipped(rPID, R, k))
  || (event(ClientChecksDHConfig(iPID, I, false)) && event(ClientChecksDHConfig(rPID, R, false))).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | !Init()
    | !SecretChatInitiator(Server, true)
    | !SecretChatResponder(Server, true)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
  )

