(*
 * MTProto 2.0: Cloud chats
 *
 * Model for the protocol used to exchange client-server messages (cloud chats)
 * using the long-term keys shared between a client and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/description
 *
 * Expected time to run this script: ~5min
 *)

(*
 * The secrecy of a message must be preserved unless any of the following happens:
 *
 * 1. the private key of the server is compromised before or during the session
 *    in which the authorization key is created.
 * 2. the secret nonce is leaked during such session;
 * 3. the client does not check the received Diffie-Hellman parameters;
 * 4. the authorization key is compromised any time after the secret message has been sent;
 * 5. the public key of the server is forged.
 *
 * This query is "strict" in the sense that removing any of the disjuncts makes it false.
 *)
query sk: PrivKey, k: AuthKey, nk: Nonce, sID: Principal;
  attacker(secretAuthMsg1)
  ==> event(CompromisedRSAKey(sk))
  ||  event(CompromisedNonce(nk))
  ||  event(ClientChecksDHParameters(false))
  ||  event(PostCompromisedAuthKey(k))
  ||  event(ForgedServerIdentity(sID)).
(* ✔︎ Expected result: true *)

query sk: PrivKey, k: AuthKey, nk: Nonce, sID: Principal;
  attacker(secretAuthMsg2)
  ==> event(CompromisedRSAKey(sk))
  ||  event(CompromisedNonce(nk))
  ||  event(ClientChecksDHParameters(false))
  ||  event(PostCompromisedAuthKey(k))
  ||  event(ForgedServerIdentity(sID)).
(* ✖︎ Expected result: false *)
(*
 * NOTE: this is expected, as the attacker may negotiate an authorization key
 * with the server, then receive secretAuthMsg2.
 *)

query sk: PrivKey, k: AuthKey, nk: Nonce, sID: Principal;
  attacker(secretAuthMsg3)
  ==> event(CompromisedRSAKey(sk))
  ||  event(CompromisedNonce(nk))
  ||  event(ClientChecksDHParameters(false))
  ||  event(PostCompromisedAuthKey(k))
  ||  event(ForgedServerIdentity(sID)).
(* ✔︎ Expected result: true *)


(* Main *)

process
  (0
    | !GenGoodDHParameters()
    | !GenBadDHParameters()
    | !GenRandomServerNonce()
    | !GenFixedServerNonce()
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, true)
    | !ServerCloudChat(Server)
    | !ClientCloudChat(Server)
    | !ForgeServerIdentity()
    | !LeakRSAKey()
    | !PostCompromiseRSAKey()
    | !LeakNk()
    | !PostCompromiseNk()
    | !PostCompromiseAuthKey()
  )

