(*
 * MTProto 2.0: Cloud chats
 *
 * Model for the protocol used to exchange client-server messages (cloud chats)
 * using the long-term keys shared between a client and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/description
 *
 * Expected time to run this script: ~2s
 *)

set preciseActions = true.

(*
 * Under "normal circumstances" (no leak of long-term or ephemeral secrets),
 * if an honest client has negotiated key k with the server, and the server
 * receives a message encrypted with k, then it was that client who sent it,
 * unless k was revealed by the attacker.
 *
 * This query shows thet key compromise impersonation is trivial: if an
 * authorization key leaks server-side, then the attacker can impersonate the
 * corresponding client to the server.
 *
 * NOTE: the query is not injective because in our model the attacker can
 * replay (encrypted) messages to the server. In practice, MTProto2 protects
 * against replay attacks with timestamps and counters (which we do not model).
 *)
query s: Nonce, m: bitstring, k: AuthKey, nc,ns,nk: Nonce, p: Modulus, g, g_a: G, b: Z;
  event(ClientAcceptsAuthKey(nc, ns, nk, p, g, g_a, b, k))
  && event(ServerReceivesCloudMessage(s, m, k))
  ==> event(ClientSendsCloudMessage(s, m, k))
  ||  event(RevealedServerAuthKey(k)).
(* ✔︎ Expected result: true *)


(* Main *)

process
  let allowWeakDiffieHellman = false in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)
    | !ServerCloudChat()
    | !ClientCloudChat(Server)

    (* Utility processes (serving ServerAuth()) *)
    | !GenGoodDHParameters()
    (* | !GenBadDHParameters() *)

    (* Allow the attacker to impersonate the server *)
    (* | !RevealRSAKey() *)

    (* Allow the attacker to learn any authorization key *)
    | !RevealServerAuthKey()

    (* Allow the attacker to reveal (part of) the client's ephemeral state *)
    (* | !RevealNk() *)
    (* | !RevealAuthProtClientExponent() *)

    (* Allow the attacker to reveal the server's ephemeral key (the DH exponent) *)
    (* | !RevealAuthProtServerExponent() *)

    (* Post-compromise attacks *)
    (* | !PostCompromiseRSAKey() *)
    (* | !PostCompromiseAuthKey() *)
    (* | !PostCompromiseNk() *)
    (* | !PostCompromiseAuthProtClientExponent() *)
    (* | !PostCompromiseAuthProtServerExponent() *)
  )



