(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: 2s
 *
 *)

(*
 * If a client X (one of I or R) receives a message m encrypted with a session
 * key k in a chat session i initiated by I with responder R, then such message
 * was sent by client Y (one of I or R), unless they skip some mandatory check.
 *
 * NOTE: X and Y need not be distinct.
 *
 * NOTE: we cannot force i = i', because the chat session identifier is available to the
 * server/attacker, who is free to change it when forwarding messages.
 *
 * NOTE: the second disjunct corresponds to the following theoretical
 * cross-session attack. Let A and B be two honest clients, and let E be the
 * attacker. Then, the attack proceeds as follows:
 *
 * - A initiates a chat i  with B, sending half-key g^a;
 * - B initiates a chat i' with A, sending half-key g^b;
 * - E acts as a responder in both sessions, impersonating B to A and A to B; that is:
 * - E accepts a chat with B by sending (A,g^a) to B;
 * - E accepts a chat with A by sending (B,g^b) to A;
 * - A and B generate and (out-of-band) validate the session key g^ab;
 * - A (resp. B) sends a message m to B (resp. A) in session i;
 * - E redirects m to B (resp. A) in session i'.
 *
 * So, E is free to mix messages exhanged by A and B across different sessions.
 * This attack can be prevented by having A and B validate not only the session
 * key, but also the chat session identifier (see table QRTableExtended).
 *)
query i, i': ChatID, X,Y,I,R: Principal, k: SessionKey, m: bitstring, a,b: Z;
  event(ClientReceivesSecretChatMsg(i, X, I, R, k, m))
  ==> event(ClientSendsSecretChatMsg(i', Y, I, R, k, m))
  ||  event(ClientSendsSecretChatMsg(i', Y, R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(a, X, k)) && event(OutOfBandKeyComparisonSkipped(b, Y, k)))
  || (event(ClientChecksDHConfig(i, X, false)) && event(ClientChecksDHConfig(i', Y, false))).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
  )

