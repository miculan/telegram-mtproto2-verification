(*
 * MTProto 2.0: Cloud chats
 *
 * Model for the protocol used to exchange client-server messages (cloud chats)
 * using the long-term keys shared between a client and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/description
 *
 * Expected time to run this script: ~1s
 *)

set preciseActions = true.

(*
 * Under "normal circumstances" (no leak of long-term or ephemeral secrets), if
 * an honest client receives a message encrypted with key k then it was the
 * server who sent it, unless k was revealed by the attacker.
 *
 * This query shows thet key compromise impersonation is trivial: if an
 * authorization key leaks client-side, then the attacker can impersonate the
 * server to that client.
 *)

(* Reachability query. TODO: move to debug queries *)
(* query s, s': Nonce, m: bitstring, k: AuthKey; *)
(*   inj-event(ClientReceivesCloudMessage(s, m, k)). *)

query s, s': Nonce, m: bitstring, k: AuthKey;
  inj-event(ClientReceivesCloudMessage(s, m, k))
  ==> (inj-event(ServerSendsCloudMessage(s', m, k)) && s = s')
  || event(RevealedClientAuthKey(k)).
(* ✔︎ Expected result: true *)


(* Main *)

process
  let allowWeakDiffieHellman = false in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)
    | !ServerCloudChat()
    | !ClientCloudChat(Server)

    (* Utility processes (serving ServerAuth()) *)
    | !GenGoodDHParameters()
    (* | !GenBadDHParameters() *)

    (* Allow the attacker to impersonate the server *)
    (* | !RevealRSAKey() *)

    (* Allow the attacker to learn any authorization key *)
    | !RevealClientAuthKey()

    (* Allow the attacker to reveal (part of) the client's ephemeral state *)
    (* | !RevealNk() *)
    (* | !RevealAuthProtClientExponent() *)

    (* Allow the attacker to reveal the server's ephemeral key (the DH exponent) *)
    (* | !RevealAuthProtServerExponent() *)

    (* Post-compromise attacks *)
    (* | !PostCompromiseRSAKey() *)
    (* | !PostCompromiseAuthKey() *)
    (* | !PostCompromiseNk() *)
    (* | !PostCompromiseAuthProtClientExponent() *)
    (* | !PostCompromiseAuthProtServerExponent() *)
  )


