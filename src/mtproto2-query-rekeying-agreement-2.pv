(*
 * MTProto 2.0: Rekeying
 *
 * Model for the protocol used for updating the session keys of secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end/pfs

 * Expected time to run this script: ~4min
 *)

set preciseActions = true.

(*
 * If an (honest) initiator I thinks that she has negotiated a new key k in session i
 * with an (honest) responder R, and R believes that she has negotiated a new key k'
 * in session i with I, then they have computed the same key.
 *)
query i: ChatID, I, R: Principal, k, k': SessionKey, m: bitstring;
  event(InitiatorHasNegotiatedNewKey(i, I, R, k))
  && event(ResponderHasNegotiatedNewKey(i, I, R, k'))
  ==> k = k'
  || event(ClientUsesStrongDHParameters(I, false)).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  new authKey1: AuthKey;
  new authKey2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, authKey1);
  insert AuthKeyClientTable(Bob, Server, authKey2);
  new a: Z;
  new b: Z;
  new i: ChatID;
  let k = genStrongSessionKey(a,b) in
  insert SecretChatClientTable(Alice, Alice, Bob, STRONG, GOOD, a, i, k);
  insert SecretChatClientTable(Bob, Alice, Bob, STRONG, GOOD, b, i, k);
  insert SecretChatClientTable(Alice, Alice, Bob, STRONG, BAD, a, i, k);
  insert SecretChatClientTable(Bob, Alice, Bob, STRONG, BAD, b, i, k);
  0.

process
  (0
    | !Init()
    | !RegisterSessionKey()
    | !RekeyingInitiator(Server)
    | !RekeyingResponder(Server)
    | !RekeyingSend(Server)
    | !RekeyingReceive(Server)
    | !RevealRekeyingInitiatorEphemeralKey()
    | !RevealRekeyingResponderEphemeralKey()
  )



