(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: ~3min
 *)

set preciseActions = true.

(*
 * If client X (which is one of I or R) sends message in a secret chat session
 * i initiated by I with responder R and the attacker learns the plaintext,
 * then some parties did not perform their mandatory checks.
 *
 * Note that I or R may be played by the attacker.
 *)
query k: SessionKey, m: bitstring, a,b: Z, X,I,R: Principal, i: ChatID;
  event(ClientSendsSecretChatMsg(i, X, I, R, k, m))
  && attacker(m)
  ==> event(AttackerRegisteredSessionKey(k, X))
  ||  event(ClientChecksDHConfig(i, X, false))
  ||  event(OutOfBandKeyComparisonSkipped(a, X, k))
  ||  event(RevealedSecretChatInitiatorEphemeralKey(a))
  ||  event(RevealedSecretChatResponderEphemeralKey(b))
  ||  event(RevealedSecretChatSessionKey(k))
  ||  event(PostCompromisedSecretChatInitiatorEphemeralKey(a))
  ||  event(PostCompromisedSecretChatResponderEphemeralKey(b))
  ||  event(PostCompromisedSecretChatSessionKey(k)).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !RegisterSessionKey()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
    | !RevealSecretChatSessionKey()
    | !RevealSecretChatInitiatorEphemeralKey()
    | !RevealSecretChatResponderEphemeralKey()
    | !PostCompromiseSecretChatSessionKey()
    | !PostCompromiseSecretChatInitiatorEphemeralKey()
    | !PostCompromiseSecretChatResponderEphemeralKey()
  )

