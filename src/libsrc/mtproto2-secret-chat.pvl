(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *)

(******************************************************************************)
(* Messages exchanged during a secret chat session                            *)
(******************************************************************************)
fun GET_DH_CONFIG()                                             : Message   [data].
fun DH_CONFIG      (Modulus, G)                                 : Message   [data].
fun REQI           (ChatID, Principal, Principal, G)            : Message   [data].
fun REQR           (ChatID, Principal, Principal, G)            : Message   [data].
fun CHAT_ACCEPTED  (ChatID)                                     : Message   [data].
fun ACCEPTR        (ChatID, Principal, Principal, G, HashValue) : Message   [data].
fun ACCEPTI        (ChatID, Principal, Principal, G, HashValue) : Message   [data].
fun CHAT           (ProcessID, bitstring)                       : Plaintext [data].


(******************************************************************************)
(* "Abstract" cryptographic primitives                                        *)
(*                                                                            *)
(* NOTE: These MUST be defined somewhere before this point. They are          *)
(* not defined here so that the choice of a model for MTProto's encryption    *)
(* scheme can be done independently, without touching this file.              *)
(*                                                                            *)
(* The reference for MTProto's encryption scheme for secret chats is          *)
(*                                                                            *)
(*     https://core.telegram.org/api/end-to-end                               *)
(*                                                                            *)
(******************************************************************************)

(* SessionKey → HashValue *)
(* fps(SessionKey) *)

(* Plaintext × SessionKey × AuthKey → Message *)
(* encodeSecretChatMsg(Plaintext, SessionKey, AuthKey) *)

(* Message × SessionKey × AuthKey → Plaintext *)
(* decodeSecretChatMsg(Message, SessionKey, AuthKey) *)


(******************************************************************************)
(* Events                                                                     *)
(******************************************************************************)

(*
 * InitiatorRequestsDHConfig(A):
 *
 * "Client A (the initiator) starts a run of the secret chat protocol in process p."
 *)
event InitiatorRequestsDHConfig(ProcessID, Principal).

(*
 * InitiatorRequestsEncryptedChat(i, A, B):
 *
 * "Chat's initiator A sends a request to start an encrypted chat with B."
 *)
event InitiatorRequestsEncryptedChat(ChatID, Principal, Principal).

(*
 * InitiatorChecksDHConfig(p, A, B, b):
 *
 * "Chat's initiator A running in process p with intended participant B
 * (b ? 'validates': 'does not validate') the received DH parameters."
 *)
event InitiatorChecksDHConfig(ProcessID, Principal, Principal, bool).

(*
 * SessionKeyFingerprintMatches(i, A, B, b):
 *
 * "The session key received by A in chat session i started by A with intended
 * participant B (b ? 'matches' : 'does not match') the session key's
 * fingerprint."
 *)
event SessionKeyFingerprintMatches(ChatID, Principal, Principal, bool).

(*
 * InitiatorHasSessionKeyForEncryptedChat(i, A, B, k):
 *
 * "A has computed session key k in chat session i started by A with intended
 * participant B."
 *)
event InitiatorHasSessionKeyForEncryptedChat(ChatID, Principal, Principal, SessionKey).

(*
 * InitiatorAcceptsEncryptedChat(i, A, B, k):
 *
 * "Chat initiator A has completed session i of the secret chat protocol
 * negotiating a shared key k with B."
 *)
event InitiatorAcceptsEncryptedChat(ChatID, Principal, Principal, SessionKey).

(*
 * ResponderReceivesRequestForEncryptedChat(i, A, B, gA):
 *
 * "Client B (the responder) has received a request to start a chat in a chat
 * session i purportedly started by A, who has sent the half-key gA."
 *)
event ResponderReceivesRequestForEncryptedChat(ChatID, Principal, Principal, G).

(*
 * ResponderAcceptsInitiator(i, A, B):
 *
 * "Client B (the responder) has accepted to start a chat session i with A."
 *)
event ResponderAcceptsInitiator(ChatID, Principal, Principal).

(*
 * ResponderChecksDHConfig(p, A, B, b):
 *
 * "Client B (the responder), who has accepted a chat with A
 * (b ? 'validates': 'does not validate') the received DH parameters."
 *)
event ResponderChecksDHConfig(ProcessID, Principal, Principal, bool).

(*
 * ResponderHasSessionKeyForEncryptedChat(i, A, B, k):
 *
 * "B has computed session key k in chat session i started by A with intended
 * participant B."
 *)
event ResponderHasSessionKeyForEncryptedChat(ChatID, Principal, Principal, SessionKey).

(*
 * ResponderAcceptsEncryptedChat(i, A, B, k):
 *
 * "Responder B has completed session i of the secret chat protocol with A
 * negotiating session key k."
 *)
event ResponderAcceptsEncryptedChat(ChatID, Principal, Principal, SessionKey).

(*
 * OutOfBandKeyComparisonSucceeded(p, A, B, k):
 *
 * "Client A running process p has successfully validated key k with B."
 *)
event OutOfBandKeyComparisonSucceeded(ProcessID, Principal, Principal, SessionKey).

(*
 * OutOfBandKeyComparisonSkipped(p, A, k):
 *
 * "Client A running process p has skipped the validation of its session key k."
 *)
event OutOfBandKeyComparisonSkipped(ProcessID, Principal, SessionKey).

(*
 * InitiatorSendsMessageToEncryptedChat(p, i, A, B, m):
 *
 * "Chat's initiator A running process p sends encrypted message m to its
 * partner within a chat session i started by A with intended participant B."
 *)
event InitiatorSendsMessageToEncryptedChat(ProcessID, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ResponderSendsMessageToEncryptedChat(p, i, A, B, m):
 *
 * "Chat's responder B running process p sends encrypted message m to its
 * partner within a chat session i started by A with intended participant B."
 *)
event ResponderSendsMessageToEncryptedChat(ProcessID, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ClientSendsMessageToEncryptedChat(p, X, i, A, B, m):
 *
 * "Client X (where X may be only A or B) running process p sends encrypted
 * message m to its partner within a chat session i started by A with intended
 * participant B."
 *)
event ClientSendsMessageToEncryptedChat(ProcessID, Principal, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * InitiatorReceivesMessageInEncryptedChat(p, i, A, B, m):
 *
 * "Chat's initiator A running process p has received and successfully
 * decrypted message m in chat session i started by A with intended participant
 * B."
 *)
event InitiatorReceivesMessageInEncryptedChat(ProcessID, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ResponderReceivesMessageInEncryptedChat(p, i, A, B, m):
 *
 * "Chat's responder B running process p has received and successfully
 * decrypted message m in chat session i started by A with intended participant
 * B."
 *)
event ResponderReceivesMessageInEncryptedChat(ProcessID, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ClientReceivesMessageInEncryptedChat(p, Y, i, A, B, m):
 *
 * "Client Y (where Y may be only A or B) running process p has received and
 * successfully decrypted message m in chat session i started by A with
 * intended participant B."
 *)
event ClientReceivesMessageInEncryptedChat(ProcessID, Principal, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ClientChecksDHConfig(p, A, b):
 *
 * "Client A running process p (b ? has checked : has failed to check) the
 * received DH parameters."
 *
 * NOTE: this is for when we do not care distinguishing between initiator and
 * responder.
 *)
event ClientChecksDHConfig(ProcessID, Principal, bool).


(******************************************************************************)
(* Private channels                                                           *)
(******************************************************************************)

(* Secure out-of-band channel between the initiator and the responder *)
table QRTable  (ProcessID, Principal, Principal, SessionKey).
table QROKTable(ProcessID, Principal, Principal, SessionKey).

(*
 * The following table can be used to model clients who out-of-band validate
 * not only their session keys, but also the chat session identifier, i.e.,
 * they check that they established the session key in the same session.
 *)
table QRTableExtended(ProcessID, ChatID, Principal, Principal, SessionKey).


(******************************************************************************)
(* Process macros for client and server                                       *)
(******************************************************************************)

(*
 * An encrypted chat's messages pass through the server, who should act as a
 * forwarder. Each message is encrypted twice: first, with the session key
 * shared only by the two communicating parties; then, with the long-term
 * authorization key of one of the clients. When the server receives a message
 * from a client A destined to client B, it decrypts the message using A's
 * long-term shared key (thus retrieving the payload encrypted with the
 * clients's session key) then re-encrypt the message with B's long-term key and
 * sends it to B.
 *)

let SecretChatInitiator(server: Principal, allowWeakDH: bool) =
  (*
   * The responder (rUser) can be anyone (including the attacker), but this
   * process (iUser) must be honest (one of Alice or Bob).
   *)
  in(io, (X: Principal, rUser: Principal));
  let iUser = choosePrincipal(X, Alice, Bob) in

  (*
   * To identify a specific run of the protocol, we use the following value.
   * This is *not* part of the protocol: it is a modelling trick used
   * exclusively to tie events that belong to the same copy of this process,
   * e.g., to be able to assert that a client checks DH parameters *and*
   * validates its session key in the *same* run of the protocol. As such, iPID
   * (and rPID in the responder) is used only inside events. Note that the
   * triple (chatID, iUser, rUser) cannot be used for such purpose, because the
   * same triple may be reused by the attacker in many sessions.
   *)
  new iPID: ProcessID;

  (* Retrieve the client's authorization key *)
  get AuthKeyClientTable(=iUser, =server, authKey) in

  (*
   * Prevent a client to start a chat with itself in the same session.
   *
   * NOTE: this does not prevent a client to send/receive messages to/from
   * itself *across* sessions.
   *)
  if iUser <> rUser then

    event InitiatorRequestsDHConfig(iPID, iUser);

    out(io, GET_DH_CONFIG());

    in(io, DH_CONFIG(p,g));

    new a: Z;
    let g_a = dhExp(p, g, a) in (* Initiator's half-key *)
    new chatID: ChatID;

    event InitiatorRequestsEncryptedChat(chatID, iUser, rUser);

    out(io, REQI(chatID, iUser, rUser, g_a));

    in(io, ACCEPTI(=chatID, =iUser, =rUser, g_b, fp));

    (*
     * Allow the process to continue only if the Diffie-Hellman parameters are good,
     * or we have explicitly allowed weak parameters.
     *)
    let unused = continue_if(allowWeakDH || (p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD)) in

    (*
     * A broken client might accept DH parameters unconditionally. The
     * following event allows us to test whether the client is running the
     * protocol with bad parameters (in which case it is assumed that it has
     * not checked them) or with strong parameters (in which case it is assumed
     * that it has checked them).
     *)
    event InitiatorChecksDHConfig(iPID, iUser, rUser, p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD);
    event ClientChecksDHConfig   (iPID, iUser,        p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD);

    let sessionKey = group2sess(dhExp(p, g_b, a)) in

    event SessionKeyFingerprintMatches(chatID, iUser, rUser, fp = fps(sessionKey));
    event InitiatorHasSessionKeyForEncryptedChat(chatID, iUser, rUser, sessionKey);

    (*
     * Out-of-band comparison of the generated session key is a crucial step to
     * avoid MitM attacks. This step is delegated to two parallel processes, one
     * that performs this step correctly and one that skips the check. This way
     * we can model a user's misbehaviour.
     *)
    insert QRTable(iPID, iUser, rUser, sessionKey);
    (* insert QRTableExtended(iPID, chatID, iUser, rUser, sessionKey); *)
    get QROKTable(=iPID, =iUser, =rUser, =sessionKey) in

    event InitiatorAcceptsEncryptedChat(chatID, iUser, rUser, sessionKey);

    (* End of the protocol *)

    (*
     * Store the session key and the DH parameters, so a rekeying process for
     * the user can pick them up. This table can also use for testing
     * observational equivalence (e.g., the equivalence of a secret and a
     * random value).
     *)
    insert SecretChatClientTable(iUser, rUser, p, g, a, sessionKey);

    if rUser = Alice || rUser = Bob then
      (
        (* Exchange a couple of secret messages *)
        new iSecretChatText: bitstring;

        event InitiatorSendsMessageToEncryptedChat(iPID,        chatID, iUser, rUser, sessionKey, iSecretChatText);
        event ClientSendsMessageToEncryptedChat   (iPID, iUser, chatID, iUser, rUser, sessionKey, iSecretChatText);

        out(io, encodeSecretChatMsg(CHAT(iPID, iSecretChatText), sessionKey, authKey));

        in(io, rAnswer: Message);
        let CHAT(pid, rSecretChatText) = decodeSecretChatMsg(rAnswer, sessionKey, authKey) in

        if pid <> iPID then (* Do not record messages sent by the process itself *)
          (
            event InitiatorReceivesMessageInEncryptedChat(iPID,        chatID, iUser, rUser, sessionKey, rSecretChatText);
            event ClientReceivesMessageInEncryptedChat   (iPID, iUser, chatID, iUser, rUser, sessionKey, rSecretChatText)
          )
      )
    else
      (*
       * «Outputting the exchanged key in a session with a dishonest
       * interlocutor allows [ProVerif] to detect Unknown Key Share (UKS)
       * attacks. in which an initiator A believes he shares a key with a
       * responder B, but B believes he shares that key with a dishonest C.
       * This key is then output to the attacker, so the secrecy of the
       * initiator’s key is broken.» (ProVerif manual).
       *)
      out(io, sessionKey);
      0.


let SecretChatResponder(server: Principal, allowWeakDH: bool) =
  (* The (honest) chat responder must be one of Alice or Bob *)
  in(io, X: Principal);
  let rUser = choosePrincipal(X, Alice, Bob) in

  (* See initiator's process *)
  new rPID: ProcessID;

  (* Retrieve client's authorization key *)
  get AuthKeyClientTable(=rUser, =server, authKey) in

  in(io, REQR(chatID, iUser, =rUser, g_a));

  if iUser <> rUser then (* See chat initiator's process *)

    event ResponderReceivesRequestForEncryptedChat(chatID, iUser, rUser, g_a);
    event ResponderAcceptsInitiator(chatID, iUser, rUser);

    out(io, CHAT_ACCEPTED(chatID));

    in(io, DH_CONFIG(p,g));

    new b: Z;
    let g_b = dhExp(p, g, b) in

    (*
     * Allow the process to continue only if the Diffie-Hellman parameters are good,
     * or we have explicitly allowed weak parameters.
     *)
    let unused = continue_if(allowWeakDH || (p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD)) in

    (* See initiator's process *)
    event ResponderChecksDHConfig(rPID, iUser, rUser, p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD);
    event ClientChecksDHConfig   (rPID,        rUser, p <> WEAK && g <> BAD && g_a <> BAD && g_b <> BAD);

    let sessionKey = group2sess(dhExp(p, g_a, b)) in
    let fp = fps(sessionKey) in

    event ResponderHasSessionKeyForEncryptedChat(chatID, iUser, rUser, sessionKey);

    out(io, ACCEPTR(chatID, iUser, rUser, g_b, fp));

    insert QRTable(rPID, rUser, iUser, sessionKey);
    (* insert QRTableExtended(rPID, chatID, rUser, iUser, sessionKey); *)
    get QROKTable(=rPID, =rUser, =iUser, =sessionKey) in

    event ResponderAcceptsEncryptedChat(chatID, iUser, rUser, sessionKey);

    (* End of the protocol *)

    (*
     * Store the session key and the DH parameters, so a rekeying process for
     * the user can pick them up.
     *)
    insert SecretChatClientTable(iUser, rUser, p, g, b, sessionKey);

    if iUser = Alice || iUser = Bob then
      (
        (* Exchange a couple of secret messages *)
        new rSecretChatText: bitstring;

        event ResponderSendsMessageToEncryptedChat(rPID,        chatID, iUser, rUser, sessionKey, rSecretChatText);
        event ClientSendsMessageToEncryptedChat   (rPID, rUser, chatID, iUser, rUser, sessionKey, rSecretChatText);

        out(io, encodeSecretChatMsg(CHAT(rPID, rSecretChatText), sessionKey, authKey));

        in(io, iAnswer: Message);

        let CHAT(pid, iSecretChatText) = decodeSecretChatMsg(iAnswer, sessionKey, authKey) in

        if pid <> rPID then (* See initiator *)
          (
            event ResponderReceivesMessageInEncryptedChat(rPID,        chatID, iUser, rUser, sessionKey, iSecretChatText);
            event ClientReceivesMessageInEncryptedChat   (rPID, rUser, chatID, iUser, rUser, sessionKey, iSecretChatText)
          )
      )
    else
      (* See initiator *)
      out(io, sessionKey);
      0.


(******************************************************************************)
(* Auxiliary processes                                                        *)
(******************************************************************************)

let PerformOutOfBandKeyComparison() =
  get QRTable(aPID, aUser, bUser, k) in
  (* get QRTableExtended(aPID, chatID, aUser, bUser, k) in *)
  if aUser <> bUser then (* Rule out the possibility of sessions of a client with itself *)
    get QRTable(bPID, =bUser, =aUser, =k) in
    (* get QRTableExtended(bPID, =chatID, =bUser, =aUser, =k) in *)
    event OutOfBandKeyComparisonSucceeded(aPID, aUser, bUser, k);
    event OutOfBandKeyComparisonSucceeded(bPID, bUser, aUser, k);
    insert QROKTable(aPID, aUser, bUser, k);
    insert QROKTable(bPID, bUser, aUser, k);
    0.

let SkipOutOfBandKeyComparison() =
  get QRTable(aPID, aUser, bUser, k) in
  (* get QRTableExtended(aPID, chatID, aUser, bUser, k) in *)
  event OutOfBandKeyComparisonSkipped(aPID, aUser, k);
  insert QROKTable(aPID, aUser, bUser, k);
  0.

(*
 * Allow the attacker to register a session key with an honest client, as if it
 * had successfully run a session of the secret chat protocol with that client.
 * Make the session key available to the attacker through the public channel.
 *)
let RegisterSessionKey() =
  in(io, (X: Principal, Y: Principal));
  if (X = Alice || X = Bob) && Y <> Alice && Y <> Bob then
    new a: Z;
    new b: Z;
    let k = genStrongSessionKey(a,b) in
    insert SecretChatClientTable(X, Y, STRONG, GOOD, a, k);
    insert SecretChatClientTable(Y, X, STRONG, GOOD, b, k);
    out(io, k);
    0.

