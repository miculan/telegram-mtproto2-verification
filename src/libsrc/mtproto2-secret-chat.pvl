(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *)

(******************************************************************************)
(* Messages exchanged during a secret chat session                            *)
(******************************************************************************)
fun GET_DH_CONFIG()                                             : Message   [data].
fun DH_CONFIG      (Modulus, G)                                 : Message   [data].
fun REQI           (ChatID, Principal, Principal, G)            : Message   [data].
fun REQR           (ChatID, Principal, Principal, G)            : Message   [data].
fun CHAT_ACCEPTED  (ChatID)                                     : Message   [data].
fun ACCEPTR        (ChatID, Principal, Principal, G, HashValue) : Message   [data].
fun ACCEPTI        (ChatID, Principal, Principal, G, HashValue) : Message   [data].
fun CHAT           (bitstring)                                  : Plaintext [data].

free SECRET_CHAT_MSG: bitstring [private].

(******************************************************************************)
(* "Abstract" cryptographic primitives                                        *)
(*                                                                            *)
(* NOTE: These MUST be defined somewhere before this point. They are          *)
(* not defined here so that the choice of a model for MTProto's encryption    *)
(* scheme can be done independently, without touching this file.              *)
(*                                                                            *)
(* The reference for MTProto's encryption scheme for secret chats is          *)
(*                                                                            *)
(*     https://core.telegram.org/api/end-to-end                               *)
(*                                                                            *)
(******************************************************************************)

(* SessionKey → HashValue *)
(* fps(SessionKey) *)

(* Plaintext × SessionKey × AuthKey → Message *)
(* encodeSecretChatMsg(Plaintext, SessionKey, AuthKey) *)

(* Message × SessionKey × AuthKey → Plaintext *)
(* decodeSecretChatMsg(Message, SessionKey, AuthKey) *)


(******************************************************************************)
(* Events                                                                     *)
(******************************************************************************)

(*
 * InitiatorRequestsDHConfig(A):
 *
 * "Client A (the initiator) starts a run of the secret chat protocol."
 *)
event InitiatorRequestsDHConfig(Principal).

(*
 * InitiatorRequestsEncryptedChat(a, i, A, B):
 *
 * "Chat's initiator A sends a request to start an encrypted chat with B."
 *)
event InitiatorRequestsEncryptedChat(Z, ChatID, Principal, Principal).

(*
 * InitiatorChecksDHConfig(a, i, A, B, b):
 *
 * "Chat's initiator A running a secret chat with intended participant B and
 * ephemeral key a (b ? 'validates': 'does not validate') the received DH
 * parameters."
 *)
event InitiatorChecksDHConfig(Z, ChatID, Principal, Principal, bool).

(*
 * SessionKeyFingerprintMatches(a, i, A, B, b):
 *
 * "The session key received by A in chat session i started by A with intended
 * participant B (b ? 'matches' : 'does not match') the session key's
 * fingerprint."
 *)
event SessionKeyFingerprintMatches(Z, ChatID, Principal, Principal, bool).

(*
 * InitiatorHasSessionKeyForEncryptedChat(a, i, A, B, k):
 *
 * "A, who has started chat session i with intended partner B and ephemeral key
 * a, has computed session key k."
 *)
event InitiatorHasSessionKeyForEncryptedChat(Z, ChatID, Principal, Principal, SessionKey).

(*
 * InitiatorAcceptsEncryptedChat(a, i, A, B, k):
 *
 * "Chat initiator A, who has started chat session i with intended partner B
 * and ephemeral key a, has completed session i of the secret chat protocol
 * and has negotiated a shared key k supposedly with B (if A has correctly
 * performed the out-of-band verification of the key)."
 *)
event InitiatorAcceptsEncryptedChat(Z, ChatID, Principal, Principal, SessionKey).

(*
 * ResponderReceivesRequestForEncryptedChat(i, A, B, gA):
 *
 * "Client B (the responder) has received a request to start chat session i
 * purportedly started by A, who has sent the half-key gA."
 *)
event ResponderReceivesRequestForEncryptedChat(ChatID, Principal, Principal, G).

(*
 * ResponderAcceptsInitiator(i, A, B):
 *
 * "Client B (the responder) has accepted to start chat session i with A."
 *)
event ResponderAcceptsInitiator(ChatID, Principal, Principal).

(*
 * ResponderChecksDHConfig(i, A, B, b):
 *
 * "Client B (the responder), who has accepted chat session i with A
 * (b ? 'validates': 'does not validate') the received DH parameters."
 *)
event ResponderChecksDHConfig(ChatID, Principal, Principal, bool).

(*
 * ResponderHasSessionKeyForEncryptedChat(i, A, B, k):
 *
 * "Responder B has computed session key k in chat session i supposedly started
 * by A with intended participant B."
 *)
event ResponderHasSessionKeyForEncryptedChat(Z, ChatID, Principal, Principal, SessionKey).

(*
 * ResponderAcceptsEncryptedChat(i, A, B, k):
 *
 * "Responder B has completed session i of the secret chat protocol supposedly
 * with A and has negotiated session key k."
 *)
event ResponderAcceptsEncryptedChat(Z, ChatID, Principal, Principal, SessionKey).

(*
 * OutOfBandKeyComparisonSucceeded(x, A, B, k):
 *
 * "Client A with ephemeral key x has successfully validated key k with B."
 *)
event OutOfBandKeyComparisonSucceeded(Z, Principal, Principal, SessionKey).

(*
 * OutOfBandKeyComparisonSkipped(x, A, k):
 *
 * "Client A with ephemeral key x has skipped the validation of its session key k."
 *)
event OutOfBandKeyComparisonSkipped(Z, Principal, SessionKey).

(*
 * ClientSendsSecretChatMsg(i, X, A, B, k, m):
 *
 * "Client X (where X may be only A or B) sends encrypted message {m}_k in chat
 * session i initiated by A with responder B."
 *)
event ClientSendsSecretChatMsg(ChatID, Principal, Principal, Principal, SessionKey, bitstring).

(*
 * ClientReceivesSecretChatMsg(i, Y, A, B, k, m):
 *
 * "Client Y (where Y may be only A or B) has received and successfully
 * decrypted message {m}_k in session i initiated by A with responder B."
 *)
event ClientReceivesSecretChatMsg(ChatID, Principal, Principal, Principal, SessionKey, bitstring).

(*
 * ClientChecksDHConfig(i, A, b):
 *
 * "Client A (b ? has checked : has failed to check) the
 * received DH parameters in chat session i."
 *
 * NOTE: this is for when we do not care distinguishing between initiator and
 * responder.
 *)
event ClientChecksDHConfig(ChatID, Principal, bool).

(*
 * Records additional attacker's capabilities.
 *)
event AttackerRegisteredSessionKey(SessionKey, Principal).
event RevealedSecretChatSessionKey(SessionKey).
event RevealedSecretChatInitiatorEphemeralKey(Z).
event RevealedSecretChatResponderEphemeralKey(Z).
event PostCompromisedSecretChatSessionKey(SessionKey).
event PostCompromisedSecretChatInitiatorEphemeralKey(Z).
event PostCompromisedSecretChatResponderEphemeralKey(Z).


(******************************************************************************)
(* Private channels                                                           *)
(******************************************************************************)

(* Records the DH exponents generated by the initiator. *)
table SecretChatInitiatorEphemeralKey(Z).

(* Records the DH exponents generated by the responder. *)
table SecretChatResponderEphemeralKey(Z).

(* Secure out-of-band channel between the initiator and the responder *)
table QRTable  (Z, Principal, Principal, SessionKey).
table QROKTable(Z, Principal, Principal, SessionKey).

(*
 * The following table can be used to model clients who validate not only their
 * session keys, but also the chat session identifier, i.e., they check that
 * they established the session key in the same session (this is not mandated
 * by MTProto, but it helps avoiding a cross-session attack—see the paper).
 *)
table QRTableExtended(ProcessID, ChatID, Principal, Principal, SessionKey).


(******************************************************************************)
(* Process macros for client and server                                       *)
(******************************************************************************)

(*
 * An encrypted chat's messages pass through the server, who should act as a
 * forwarder. Each message is encrypted twice: first, with the session key
 * shared only by the two communicating parties; then, with the long-term
 * authorization key of one of the clients. When the server receives a message
 * from client A destined to client B, the server decrypts the message using
 * A's long-term shared key (thus retrieving the payload encrypted with the
 * clients' session key), then it re-encrypts the message with B's long-term
 * key, and sends the result to B.
 *)

let SecretChatInitiator(server: Principal, allowWeakDH: bool) =
  (*
   * The responder (rUser) can be anyone (including the attacker), but this
   * process (iUser) must be honest (one of Alice or Bob).
   *)
  in(io, (X: Principal, rUser: Principal));
  let iUser = choosePrincipal(X, Alice, Bob) in

  (* Retrieve the client's authorization key *)
  get AuthKeyClientTable(=iUser, =server, authKey) in

  event InitiatorRequestsDHConfig(iUser);

  out(io, GET_DH_CONFIG());

  in(io, DH_CONFIG(p,g));

  let unused1 = continue_if(allowWeakDH || (p <> WEAK && g <> BAD)) in

  (* Ephemeral key *)
  new a: Z;

  (* Store the ephemeral exponent so that it can be revealed by another process *)
  insert SecretChatInitiatorEphemeralKey(a);

  let g_a = dhExp(p, g, a) in (* Initiator's half-key *)

  new chatID: ChatID;

  event InitiatorRequestsEncryptedChat(a, chatID, iUser, rUser);

  out(io, REQI(chatID, iUser, rUser, g_a));

  in(io, ACCEPTI(=chatID, =iUser, =rUser, g_b, fp));

  (*
   * Allow the process to continue only if the half-key from the responder is
   * good, or we have explicitly allowed weak parameters.
   *)
  let unused2 = continue_if(allowWeakDH || g_b <> BAD) in

  (*
   * A broken client might accept DH parameters unconditionally. The following
   * events allow us to test whether the client is running the protocol with
   * bad parameters (in which case it is assumed that it has not checked them)
   * or with strong parameters (in which case it is assumed that it has checked
   * them).
   *)
  event InitiatorChecksDHConfig(a, chatID, iUser, rUser, p <> WEAK && g <> BAD && g_b <> BAD);
  event ClientChecksDHConfig(chatID, iUser, p <> WEAK && g <> BAD && g_b <> BAD);

  let sessionKey = group2sess(dhExp(p, g_b, a)) in

  event SessionKeyFingerprintMatches(a, chatID, iUser, rUser, fp = fps(sessionKey));
  event InitiatorHasSessionKeyForEncryptedChat(a, chatID, iUser, rUser, sessionKey);

  (*
   * Out-of-band comparison of the generated session key is a crucial step to
   * avoid MitM attacks. This step is delegated to two parallel processes, one
   * that performs this step correctly and one that skips the check. This way
   * we can model a user's misbehaviour.
   *)
  insert QRTable(a, iUser, rUser, sessionKey);
  (* insert QRTableExtended(iPID, chatID, iUser, rUser, sessionKey); *)
  get QROKTable(=a, =iUser, =rUser, =sessionKey) in

  event InitiatorAcceptsEncryptedChat(a, chatID, iUser, rUser, sessionKey);

  (* End of the protocol *)

  (*
   * Store the session key and the DH parameters, so that a rekeying process
   * for the user can pick them up. This table can also be used for testing
   * observational equivalence (e.g., the equivalence of a secret and a random
   * value) or to reveal the session key.
   *)
  insert SecretChatClientTable(iUser, iUser, rUser, p, g, a, chatID, sessionKey);
  0.


let SecretChatResponder(server: Principal, allowWeakDH: bool) =
  (* The (honest) chat responder must be one of Alice or Bob *)
  in(io, X: Principal);
  let rUser = choosePrincipal(X, Alice, Bob) in

  (* Retrieve client's authorization key *)
  get AuthKeyClientTable(=rUser, =server, authKey) in

  in(io, REQR(chatID, iUser, =rUser, g_a));

  (* See chat initiator's process *)
  (* if iUser <> rUser then *)

  event ResponderReceivesRequestForEncryptedChat(chatID, iUser, rUser, g_a);
  event ResponderAcceptsInitiator(chatID, iUser, rUser);

  out(io, CHAT_ACCEPTED(chatID));

  in(io, DH_CONFIG(p,g));

  (*
   * Allow the process to continue only if the Diffie-Hellman parameters are good,
   * or we have explicitly allowed weak parameters.
   *)
  let unused1 = continue_if(allowWeakDH || (p <> WEAK && g <> BAD && g_a <> BAD)) in

  (* See initiator's process *)
  event ResponderChecksDHConfig(chatID, iUser, rUser, p <> WEAK && g <> BAD && g_a <> BAD);
  event ClientChecksDHConfig   (chatID,        rUser, p <> WEAK && g <> BAD && g_a <> BAD);

  (* See initiator's process *)
  new b: Z;

  (* Store the ephemeral exponent so that it can be revealed by another process *)
  insert SecretChatResponderEphemeralKey(b);

  let g_b = dhExp(p, g, b) in

  let sessionKey = group2sess(dhExp(p, g_a, b)) in
  let fp = fps(sessionKey) in

  event ResponderHasSessionKeyForEncryptedChat(b, chatID, iUser, rUser, sessionKey);

  out(io, ACCEPTR(chatID, iUser, rUser, g_b, fp));

  insert QRTable(b, rUser, iUser, sessionKey);
  (* insert QRTableExtended(rPID, chatID, rUser, iUser, sessionKey); *)
  get QROKTable(=b, =rUser, =iUser, =sessionKey) in

  event ResponderAcceptsEncryptedChat(b, chatID, iUser, rUser, sessionKey);

  (* End of the protocol *)

  (*
   * Store the session key and the DH parameters, so that a rekeying process
   * for the user can pick them up.
   *)
  insert SecretChatClientTable(rUser, iUser, rUser, p, g, b, chatID, sessionKey);
  0.


(*
 * Client X sends {m}_k in chat session i initiated by iUser with responder rUser.
 *)
let SecretChatSend(server: Principal) =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  new m: bitstring;

  event ClientSendsSecretChatMsg(i, X, iUser, rUser, k, m);
  out(io, encodeSecretChatMsg(CHAT(m), k, authKey));
  0.

let SecretChatSendFreeMsg(server: Principal) =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  event ClientSendsSecretChatMsg(i, X, iUser, rUser, k, SECRET_CHAT_MSG);
  out(io, encodeSecretChatMsg(CHAT(SECRET_CHAT_MSG), k, authKey));
  0.

(*
 * Client X receives {m}_k in chat session i initiated by iUser with responder rUser.
 *)
let SecretChatReceive(server: Principal) =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  in(io, c: Message);
  let CHAT(m) = decodeSecretChatMsg(c, k, authKey) in

  event ClientReceivesSecretChatMsg(i, X, iUser, rUser, k, m);
  0.


(******************************************************************************)
(* Auxiliary processes                                                        *)
(******************************************************************************)

(*
 * Allow the attacker to register a session key with an honest client, as if it
 * had successfully run a session of the secret chat protocol with that client.
 * Make the session key available to the attacker through the public channel.
 *)
let RegisterSessionKey() =
  in(io, (X: Principal, Y: Principal));
  if (X = Alice || X = Bob) && Y <> Alice && Y <> Bob then
    new a: Z;
    new b: Z;
    new i: ChatID;
    new authKey: AuthKey;
    let k = genStrongSessionKey(a,b) in
    insert SecretChatClientTable(X, Y, X, STRONG, GOOD, a, i, k);
    insert SecretChatClientTable(Y, Y, X, STRONG, GOOD, b, i, k);
    event AttackerRegisteredSessionKey(k, X);
    out(io, k);
    0.

let PerformOutOfBandKeyComparison() =
  get QRTable(aPID, aUser, bUser, k) in
  (* get QRTableExtended(aPID, chatID, aUser, bUser, k) in *)
  if aUser <> bUser then (* Rule out the possibility of sessions of a client with itself *)
    get QRTable(bPID, =bUser, =aUser, =k) in
    (* get QRTableExtended(bPID, =chatID, =bUser, =aUser, =k) in *)
    event OutOfBandKeyComparisonSucceeded(aPID, aUser, bUser, k);
    event OutOfBandKeyComparisonSucceeded(bPID, bUser, aUser, k);
    insert QROKTable(aPID, aUser, bUser, k);
    insert QROKTable(bPID, bUser, aUser, k);
    0.

let SkipOutOfBandKeyComparison() =
  get QRTable(aPID, aUser, bUser, k) in
  (* get QRTableExtended(aPID, chatID, aUser, bUser, k) in *)
  event OutOfBandKeyComparisonSkipped(aPID, aUser, k);
  insert QROKTable(aPID, aUser, bUser, k);
  0.

let RevealSecretChatSessionKey() =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  event RevealedSecretChatSessionKey(k);
  out(io, k).

let RevealSecretChatInitiatorEphemeralKey() =
  get SecretChatInitiatorEphemeralKey(a: Z) in
  event RevealedSecretChatInitiatorEphemeralKey(a);
  out(io, a).

let RevealSecretChatResponderEphemeralKey() =
  get SecretChatResponderEphemeralKey(b: Z) in
  event RevealedSecretChatResponderEphemeralKey(b);
  out(io, b).

let PostCompromiseSecretChatSessionKey() =
  phase 1;
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  event PostCompromisedSecretChatSessionKey(k);
  out(io, k).

let PostCompromiseSecretChatInitiatorEphemeralKey() =
  phase 1;
  get SecretChatInitiatorEphemeralKey(a: Z) in
  event PostCompromisedSecretChatInitiatorEphemeralKey(a);
  out(io, a).

let PostCompromiseSecretChatResponderEphemeralKey() =
  phase 1;
  get SecretChatResponderEphemeralKey(b: Z) in
  event PostCompromisedSecretChatResponderEphemeralKey(b);
  out(io, b).

