(*
  MTProto 2.0: Rekeying

  Model for the protocol used for updating the session keys of secret
  chats.

  See: https://core.telegram.org/api/end-to-end/pfs
*)


(******************************************************************************)
(* Messages exchanged during the rekeying protocol                            *)
(******************************************************************************)

fun HALFKEYA(bitstring, Elem)            : bitstring [data].
fun HALFKEYB(bitstring, Elem, bitstring) : bitstring [data].
fun FPACK   (bitstring, bitstring)       : bitstring [data].


(******************************************************************************)
(* Events                                                                     *)
(******************************************************************************)
event InitiatorSendsHalfKey         (Principal, Principal, bitstring, Elem).
event InitiatorReceivesHalfKey      (Principal, Principal, bitstring, Elem, bitstring).
event InitiatorSendsAck             (Principal, Principal, bitstring, bitstring).
event InitiatorSendsMsgWithNewKey   (Principal, Principal, bitstring, SharedKey).
event ResponderReceivesHalfKey      (Principal, Principal, bitstring, Elem).
event ResponderSendsHalfKey         (Principal, Principal, bitstring, Elem, bitstring).
event ResponderReceivesAck          (Principal, Principal, bitstring, bitstring).
event ResponderReceivesMsgWithNewKey(Principal, Principal, bitstring, SharedKey).


(******************************************************************************)
(* Process macros                                                             *)
(******************************************************************************)

let RekeyingInitiator(iID: Principal, key: SharedKey, p: Group, g: Elem, rID: Principal) =
  (* 1. Generate random session id and DH half key *)
  new sessID: bitstring;
  new a: Exp;
  let g_a = dhExp(p,g,a) in

  event InitiatorSendsHalfKey(iID, rID, sessID, g_a);

  new r1: Nonce;
  out(io, aenc(HALFKEYA(sessID, g_a), key, r1));

  in(io, encMsg: bitstring);
  let HALFKEYB(=sessID, g_b, fp) = adec(encMsg, key) in

  event InitiatorReceivesHalfKey(iID, rID, sessID, g_b, fp);

  let newKey = elem2key(dhExp(p,g_b,a)) in
  if fp = fingerprint(newKey) then

    event InitiatorSendsAck(iID, rID, sessID, fp);

    new r2: Nonce;
    out(io, aenc(FPACK(sessID, fp), key, r2));

    event InitiatorSendsMsgWithNewKey(iID, rID, secretMsg, newKey);

    new r: Nonce;
    out(io, aenc(secretMsg, newKey, r));
    0.


let RekeyingResponder(rID: Principal, key: SharedKey, p: Group, g: Elem, iID: Principal) =
  in(io, encMsg1: bitstring);
  let HALFKEYA(sessID, g_a) = adec(encMsg1, key) in

  event ResponderReceivesHalfKey(iID, rID, sessID, g_a);

  new b: Exp;
  let g_b = dhExp(p,g,b) in
  let newKey = elem2key(dhExp(p,g_a,b)) in
  let fp = fingerprint(newKey) in

  event ResponderSendsHalfKey(iID, rID, sessID, g_b, fp);

  new r: Nonce;
  out(io, aenc(HALFKEYB(sessID, g_b, fp), key, r));

  in(io, encMsg2: bitstring);
  let FPACK(=sessID, =fp) = adec(encMsg2, key) in

  event ResponderReceivesAck(iID, rID, sessID, fp);

  in(io, encMsg3: bitstring);
  let msg = adec(encMsg3, newKey) in

  event ResponderReceivesMsgWithNewKey(iID, rID, msg, newKey);

  0.

