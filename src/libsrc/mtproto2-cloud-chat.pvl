(*
 * MTProto 2.0: Cloud chats
 *
 * Model for cloud chat messages, i.e., messages exchanged between a client and
 * Telegram's server, encrypted using a long-term shared key (aka,
 * authorization key).
 *
 * See: https://core.telegram.org/mtproto/description
 *)

(******************************************************************************)
(* "Abstract" cryptographic primitives                                        *)
(*                                                                            *)
(* NOTE: These MUST be defined somewhere before this point. They are          *)
(* not defined here so that the choice of a model for MTProto's encryption    *)
(* scheme can be done independently, without touching this file.              *)
(*                                                                            *)
(* The reference for MTProto's encryption scheme for cloud chat n             *)
(*                                                                            *)
(*    https://core.telegram.org/mtproto/description                           *)
(*                                                                            *)
(******************************************************************************)

(* encodeCloudChatMsg(Plaintext, AuthKey): Message *)
(* clientDecodeCloudChatMsg(Message, AuthKey): Plaintext *)
(* serverDecodeCloudChatMsg(Message): Plaintext *)


(******************************************************************************)
(* Events                                                                     *)
(******************************************************************************)
event ClientSendsCloudMessage                        (Nonce, bitstring, AuthKey).
event ClientReceivesCloudMessage                     (Nonce, bitstring, AuthKey).
event ClientSendsCloudMessageInPhaseOne              (Nonce, bitstring, AuthKey).

event ServerReceivesCloudMessage                     (Nonce, bitstring, AuthKey).
event ServerSendsCloudMessage                        (Nonce, bitstring, AuthKey).
event ServerReceivesCloudMessageInPhaseOne           (Nonce, bitstring, AuthKey).


(******************************************************************************)
(* Helper functions                                                           *)
(******************************************************************************)

(*
 * Constructors for the encrypted part of cloud-chat messages. In practice,
 * Telegram uses monotonically increasing counters (message identifiers), which
 * also permit to distinguish between client messages and server messages. For
 * the server, message identifiers must be equal to 1 modulo 4, or to 3 modulo
 * 4. Message identifiers for the messages sent by clients must be divisible by
 * 4.
 *)
fun SPT(Nonce, bitstring): Plaintext [data].
fun CPT(Nonce, bitstring): Plaintext [data].

(* Constructor for a message *)
fun MSG(Message): Message [data].


(*
 * Telegram client
 *
 * server: server's identity
 *)
let ClientCloudChat(server: Principal) =
  in(io, X: Principal);
  let cUser = choosePrincipal(X, Alice, Bob) in

  (* Retrieve the long-term shared key between client and server *)
  get AuthKeyClientTable(=cUser, =server, authKey) in

  (*
   * According to Telegram's specification, a random 64-bit number generated
   * by the client is used to distinguish between individual sessions. This
   * session id is sent along with the encrypted message.
   *)
  new sessionID: Nonce;
  new m1: bitstring;

  event ClientSendsCloudMessage(sessionID, m1, authKey);

  let msg1 = CPT(sessionID, m1) in
  out(io, MSG(encodeCloudChatMsg(msg1, authKey)));

  in(io, MSG(msg2));
  let SPT(=sessionID, m2) = clientDecodeCloudChatMsg(msg2, authKey) in

  event ClientReceivesCloudMessage(sessionID, m2, authKey);

  phase 1;
  new m3: bitstring;

  event ClientSendsCloudMessageInPhaseOne(sessionID, m3, authKey);

  let msg3 = CPT(sessionID, m3) in

  out(io, MSG(encodeCloudChatMsg(msg3, authKey)));
  0.


(*
 * Telegram server
 *
 * server: server's identity
 *)
let ServerCloudChat() =

  in(io, MSG(msg1));
  let (CPT(sessionID, m1), authKey: AuthKey) = serverDecodeCloudChatMsg(msg1) in

  event ServerReceivesCloudMessage(sessionID, m1, authKey);

  new m2: bitstring;

  event ServerSendsCloudMessage(sessionID, m2, authKey);

  let msg2 = SPT(sessionID, m2) in
  out(io, MSG(encodeCloudChatMsg(msg2, authKey)));

  phase 1;
  in(io, MSG(msg3));
  let (CPT(=sessionID, m3), =authKey) = serverDecodeCloudChatMsg(msg3) in

  event ServerReceivesCloudMessageInPhaseOne(sessionID, m3, authKey);
  0.

