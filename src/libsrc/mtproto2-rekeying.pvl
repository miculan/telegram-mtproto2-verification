(*
 * MTProto 2.0: Rekeying
 *
 * Model for the protocol used for updating the session keys of secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end/pfs
 *)

(******************************************************************************)
(* Messages exchanged during the rekeying protocol                            *)
(******************************************************************************)
fun HALFKEYA(ChatID, G)                    : Plaintext [data].
fun HALFKEYB(ChatID, G, HashValue)         : Plaintext [data].
fun FPACK   (ChatID, HashValue)            : Plaintext [data].

free REKEYING_SECRET_MSG: bitstring [private].

(******************************************************************************)
(* Persistent data                                                            *)
(******************************************************************************)
table RekeyingInitiatorEphemeralKey(Z).
table RekeyingResponderEphemeralKey(Z).

(******************************************************************************)
(* "Abstract" cryptographic primitives                                        *)
(*                                                                            *)
(* NOTE: These MUST be defined somewhere before this point. They are          *)
(* not defined here so that the choice of a model for MTProto's encryption    *)
(* scheme can be done independently, without touching this file.              *)
(******************************************************************************)

(* SessionKey → HashValue *)
(* fps(SessionKey) *)

(* Plaintext × SessionKey × AuthKey → Message *)
(* encodeSecretChatMsg(Plaintext, SessionKey, AuthKey) *)

(* Message × SessionKey × AuthKey → Plaintext *)
(* decodeSecretChatMsg(Message, SessionKey, AuthKey) *)


(******************************************************************************)
(* Events                                                                     *)
(******************************************************************************)

(*
 * ClientUsesStrongDHParameters(X, b)
 *
 * "Client X (b ? "uses" : "does not use") strong DH parameters.
 *)
event ClientUsesStrongDHParameters(Principal, bool).

(*
 * InitiatorSendsHalfKey(i, A, B, g_a):
 *
 * "A starts a rekeying session i with B by sending a new half-key g_a."
 *)
event InitiatorSendsHalfKey(ChatID, Principal, Principal, G).

(*
 * InitiatorReceivesHalfKey(i, A, B, g_b, fp):
 *
 * "A has received B's half-key g_b and the new session key's fingerprint fp
 * during rekeying session i."
 *)
event InitiatorReceivesHalfKey(ChatID, Principal, Principal, G, HashValue).

(*
 * RekeyingKeyFingerprintMatches(i, A, B, b):
 *
 * "Chat's initiator A (b: 'validates' : 'does not validate') the key
 * fingerprint received from B during rekeying session i."
 *)
event RekeyingKeyFingerprintMatches(ChatID, Principal, Principal, bool).

(*
 * InitiatorHasNegotiatedNewKey(i, A, B, k):
 *
 * "Chat's initiator A has computed a new session key k in chat session i,
 * which she believes to be shared with B."
 *)
event InitiatorHasNegotiatedNewKey(ChatID, Principal, Principal, SessionKey).

(*
 * InitiatorSendsAck(i, A, B, fp):
 *
 * "A sends its new session key's fingerprint fp as an acknowledgment to B in
 * session i."
 *)
event InitiatorSendsAck(ChatID, Principal, Principal, HashValue).

(*
 * ClientSendsMsgWithNewKey(p, X, i, A, B, k, m):
 *
 * "Client X (one of A or B) running process p in rekeying session i sends a secret
 * message m to its partner, encrypted with the new session key k."
 *)
event ClientSendsMessageWithNewKey(Z, Principal, ChatID, Principal, Principal, SessionKey, bitstring).
(*
 * ClientReceivesMsgWithNewKey(p, X, i, A, B, k, m):
 *
 * "Client X (one of A or B) running process p in rekeying session i has
 * received and decrypted a secret message m from its partner, encrypted with
 * the new session key k."
 *)
event ClientReceivesMessageWithNewKey(Z, Principal, ChatID, Principal, Principal, SessionKey, bitstring).

(*
 * ResponderReceivesHalfKey(i, A, B, g_a):
 *
 * "Chat's responder B has received A's half-key g_a during rekeying session
 * i."
 *)
event ResponderReceivesHalfKey(ChatID, Principal, Principal, G).

(*
 * ResponderSendsHalfKey(i, A, B, g_b, fp):
 *
 * "Chat's responder B sends its half-key g_b and the fingerprint fp of the new
 * session key to A during rekeying session i."
 *)
event ResponderSendsHalfKey(ChatID, Principal, Principal, G, HashValue).

(*
 * ResponderReceivesAck(i, A, B, fp):
 *
 * "Chat's responder B has received the fingerprint fp of the new session key
 * negotiated with A during rekeying session i."
 *)
event ResponderReceivesAck(ChatID, Principal, Principal, HashValue).

(*
 * ResponderHasNegotiatedNewKey(i, A, B, k):
 *
 * "Chat's responder B has computed a new session key k in chat session i,
 * which he believes to be shared with A."
 *)
event ResponderHasNegotiatedNewKey(ChatID, Principal, Principal, SessionKey).

(*
 * Records additional attacker's capabilities.
 *)
event RevealedRekeyingInitiatorEphemeralKey(Z).
event RevealedRekeyingResponderEphemeralKey(Z).
event PostCompromisedRekeyingInitiatorEphemeralKey(Z).
event PostCompromisedRekeyingResponderEphemeralKey(Z).


(******************************************************************************)
(* Process macros                                                             *)
(******************************************************************************)

let RekeyingInitiator(server: Principal) =
  (* An (honest) initiator must be one of Alice or Bob *)
  in(io, (X: Principal, rUser: Principal));

  (* Prevent users to start rekeying sessions with themselves *)
  let unused1 = continue_if(X <> rUser) in

  (* Ensure that this process is honest *)
  let iUser = choosePrincipal(X, Alice, Bob) in

  (*
   * Retrieve the DH parameters and the session key used during the first
   * secret chat.
   *)
  get SecretChatClientTable(=iUser, I, R, p, g, oldExp, chatID, sessionKey) in

  (* p and g are easily guessable: make sure that they are known to the attacker *)
  out(io, (p,g));

  (* Ensure that the initiator retrieves a session key shared with the responder *)
  let unused2 = continue_if(I = rUser || R = rUser) in

  event ClientUsesStrongDHParameters(iUser, p <> WEAK && g <> BAD);

  (*
   * Retrieve the client's authorization key to communicate with the server.
   *)
  get AuthKeyClientTable(=iUser, =server, authKey) in

  (* 1. Generate random session id and DH half-key *)
  new a: Z;

  insert RekeyingInitiatorEphemeralKey(a);

  let g_a = dhExp(p, g, a) in
  new exchangeID: ChatID;

  event InitiatorSendsHalfKey(exchangeID, iUser, rUser, g_a);

  out(io, encodeSecretChatMsg(HALFKEYA(exchangeID, g_a), sessionKey, authKey));

  in(io, encMsg: Message);
  let HALFKEYB(=exchangeID, g_b, fp) = decodeSecretChatMsg(encMsg, sessionKey, authKey) in

  event InitiatorReceivesHalfKey(exchangeID, iUser, rUser, g_b, fp);

  let newKey = group2sess(dhExp(p, g_b, a)) in

  event RekeyingKeyFingerprintMatches(exchangeID, iUser, rUser, fp = fps(newKey));
  event InitiatorHasNegotiatedNewKey(exchangeID, iUser, rUser, newKey);
  event InitiatorSendsAck(exchangeID, iUser, rUser, fp);

  out(io, encodeSecretChatMsg(FPACK(exchangeID, fp), sessionKey, authKey));

  (* End of the rekeying protocol *)

  (* Store the session data for use by other processes *)
  insert RekeyingClientTable(iUser, iUser, rUser, p, g, a, exchangeID, newKey);
  0.


let RekeyingResponder(server: Principal) =
  (* An (honest) responder must be one of Alice or Bob *)
  in(io, X: Principal);
  let rUser = choosePrincipal(X, Alice, Bob) in

  (*
   * Retrieve the DH parameters and the session key used during the first
   * secret chat.
   *)
  get SecretChatClientTable(=rUser, I, R, p, g, oldExp, chatID, sessionKey) in

  let iUser = chooseOtherPrincipal(rUser, I, R) in

  event ClientUsesStrongDHParameters(iUser, p <> WEAK && g <> BAD);

  (*
   * Retrieve the client's authorization key to communicate with the server.
   *)
  get AuthKeyClientTable(=rUser, =server, authKey) in

  in(io, encMsg1: Message);
  let HALFKEYA(exchangeID, g_a) = decodeSecretChatMsg(encMsg1, sessionKey, authKey) in

  event ResponderReceivesHalfKey(exchangeID, iUser, rUser, g_a);

  new b: Z;

  insert RekeyingResponderEphemeralKey(b);

  let newKey = group2sess(dhExp(p, g_a, b)) in
  let g_b = dhExp(p, g, b) in
  let fp = fps(newKey) in

  event ResponderSendsHalfKey(exchangeID, iUser, rUser, g_b, fp);

  out(io, encodeSecretChatMsg(HALFKEYB(exchangeID, g_b, fp), sessionKey, authKey));

  in(io, encMsg2: Message);
  let FPACK(=exchangeID, =fp) = decodeSecretChatMsg(encMsg2, sessionKey, authKey) in

  event ResponderReceivesAck(exchangeID, iUser, rUser, fp);
  event ResponderHasNegotiatedNewKey(exchangeID, iUser, rUser, newKey);

  (* End of the rekeying protocol *)

  (* Store the session data for use by other processes *)
  insert RekeyingClientTable(rUser, iUser, rUser, p, g, b, exchangeID, newKey);
  0.


(*
 * Client X sends {m}_k in chat session i initiated by iUser with responder rUser.
 *)
let RekeyingSend(server: Principal) =
  get RekeyingClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  new m: bitstring;

  event ClientSendsMessageWithNewKey(x, X, i, iUser, rUser, k, m);

  out(io, encodeSecretChatMsg(CHAT(m), k, authKey));
  0.

let RekeyingSendFreeMsg(server: Principal) =
  get RekeyingClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  event ClientSendsMessageWithNewKey(x, X, i, iUser, rUser, k, REKEYING_SECRET_MSG);

  out(io, encodeSecretChatMsg(CHAT(REKEYING_SECRET_MSG), k, authKey));
  0.


(*
 * Client X receives {m}_k in chat session i initiated by iUser with responder rUser.
 *)
let RekeyingReceive(server: Principal) =
  get RekeyingClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  in(io, c: Message);
  let CHAT(m) = decodeSecretChatMsg(c, k, authKey) in

  event ClientReceivesMessageWithNewKey(x, X, i, iUser, rUser, k, m);
  0.


(******************************************************************************)
(* Auxiliary processes                                                        *)
(******************************************************************************)

let RevealRekeyingInitiatorEphemeralKey() =
  get RekeyingInitiatorEphemeralKey(a: Z) in
  event RevealedRekeyingInitiatorEphemeralKey(a);
  out(io, a).

let RevealRekeyingResponderEphemeralKey() =
  get RekeyingResponderEphemeralKey(b: Z) in
  event RevealedRekeyingResponderEphemeralKey(b);
  out(io, b).

let PostCompromiseRekeyingInitiatorEphemeralKey() =
  phase 1;
  get RekeyingInitiatorEphemeralKey(a: Z) in
  event PostCompromisedRekeyingInitiatorEphemeralKey(a);
  out(io, a).

let PostCompromiseRekeyingResponderEphemeralKey() =
  phase 1;
  get RekeyingResponderEphemeralKey(b: Z) in
  event PostCompromisedRekeyingResponderEphemeralKey(b);
  out(io, b).
