(*
 * MTProto 2.0: Creating an authorization key.
 *
 * Model for the protocol used to create long-term keys shared between a client
 * and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/auth_key
 *
 * Expected time to run this script: ~1s
 *)

set preciseActions = true.

(*
 * Secrecy assumptions: authorization keys are secure, i.e., long-term and
 * ephemeral keys are not leaked.
 *)
not attacker(new sk).
not attacker(new a).
not attacker(new b).
not attacker(new nk).

(*
 * Key agreement: If client and server end up negotiating an authorization key
 * in a session executed correctly, then the key is the same. The quality of DH
 * parameters does not matter.
 *)
query nc, ns, nk, nk': Nonce, p, p': Modulus, g, g', gx, gx': G, x, x': Z, k, k': AuthKey, sk: PrivKey, pID, pID': ProcessID;
  event   (ServerAcceptsAuthKey(nc, ns, nk,  p,  g,  gx,  x,  k))
  && event(ClientAcceptsAuthKey(nc, ns, nk', p', g', gx', x', k'))
  ==> k = k'
  || (
    event(ServerGeneratesNonce(pID, ns))
    && event(ServerGeneratesNonce(pID', ns))
    && pID <> pID'
  ).
(* ✔︎ Expected result: true *)


(* Main *)
process
  let allowWeakDiffieHellman = true in (* This value does not matter *)
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)
    | !GenGoodDHParameters()
    | !GenBadDHParameters()
  )

