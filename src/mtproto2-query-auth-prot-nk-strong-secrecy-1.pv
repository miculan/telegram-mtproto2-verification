(*
 * MTProto 2.0: Creating an authorization key.
 *
 * Model for the protocol used to create long-term keys shared between a client
 * and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/auth_key
 *
 * Expected time to run this script: ~30s
 *
 * NOTE: run this query against model3, which uses probabilistic encryption (it
 * doesn't change the result, but a randomized model is more faithful to the
 * real protocol, which include randomness in the exchanged messages).
 *)

(*
 * There are no obvious ways to distinguish nk from random.
 * What the trace suggests is that the attacker replace the server
 * after the third message, apply kdf(ns, choice[nk,n]) and send the
 * client a message encrypted with the result. If the client is able
 * to decrypt the message then the attacker was given nk. This does not
 * seem particularly useful, though.
 *)
let Pnk() =
  get AuthProtClientEphemeralSecrets(nk: Nonce, b: Z) in
  new n: Nonce;
  out(io, choice[nk, n]).
(* ✖︎ Expected result: cannot be proved *)

process
  let allowWeakDiffieHellman = false in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)
    | !GenGoodDHParameters()
    | Pnk()
  )

