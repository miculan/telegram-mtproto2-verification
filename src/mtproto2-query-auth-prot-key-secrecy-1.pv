(*
 * MTProto 2.0: Creating an authorization key.
 *
 * Model for the protocol used to create long-term keys shared between a client
 * and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/auth_key
 *
 * Expected time to run this script: ~35s
 *)

set preciseActions = true.

query nc, ns, nk: Nonce, p: Modulus, g, g_a, g_b: G, a, b: Z, k: AuthKey, sk: PrivKey;
  event(ClientAcceptsAuthKey(nc, ns, nk, p, g, g_a, b, k))
  && attacker(k)
  ==> event(ClientChecksDHParameters(nc, ns, nk, p, g, g_a, false))
  ||  event(RevealedRSAKey(sk))
  ||  event(RevealedAuthKey(k))
  ||  event(RevealedNk(nk))
  || (event(RevealedAuthProtClientExponent(b)) && event(RevealedAuthProtServerExponent(a)))
  (* Post-compromises *)
  || event(PostCompromisedAuthKey(k))
  || (event(PostCompromisedRSAKey(sk))                && event(PostCompromisedAuthProtClientExponent(b)))
  || (event(PostCompromisedRSAKey(sk))                && event(PostCompromisedAuthProtServerExponent(a)))
  || (event(PostCompromisedRSAKey(sk))                && event(RevealedAuthProtClientExponent(b)))
  || (event(PostCompromisedRSAKey(sk))                && event(RevealedAuthProtServerExponent(a)))
  || (event(RevealedAuthProtClientExponent(b))        && event(PostCompromisedAuthProtServerExponent(a)))
  || (event(PostCompromisedAuthProtClientExponent(b)) && event(RevealedAuthProtServerExponent(a)))
  || (event(PostCompromisedAuthProtServerExponent(a)) && event(PostCompromisedAuthProtClientExponent(b)))
  || (event(PostCompromisedAuthProtServerExponent(a)) && event(PostCompromisedNk(nk)))
  || (event(PostCompromisedAuthProtClientExponent(b)) && event(PostCompromisedNk(nk)))
  || (event(RevealedAuthProtServerExponent(a))        && event(PostCompromisedNk(nk)))
  || (event(RevealedAuthProtClientExponent(b))        && event(PostCompromisedNk(nk))).
(* ✔︎ Expected result: true *)


process
  let allowWeakDiffieHellman = true in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)

    (* Utility processes (serving ServerAuth()) *)
    | !GenGoodDHParameters()
    | !GenBadDHParameters()

    (* Allow the attacker to impersonate the server *)
    | !RevealRSAKey()

    (* Allow the attacker to learn any authorization key *)
    | !RevealAuthKey()

    (* Allow the attacker to reveal (part of) the client's ephemeral state *)
    | !RevealNk()
    | !RevealAuthProtClientExponent()

    (* Allow the attacker to reveal the server's ephemeral key (the DH exponent) *)
    | !RevealAuthProtServerExponent()

    (* Post-compromise attacks *)
    | !PostCompromiseRSAKey()
    | !PostCompromiseAuthKey()
    | !PostCompromiseNk()
    | !PostCompromiseAuthProtClientExponent()
    | !PostCompromiseAuthProtServerExponent()
  )

