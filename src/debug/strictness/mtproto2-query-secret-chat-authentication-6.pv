query i,i',j,j': ChatID, a,b,x,y: Z, X,I,I',R,R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(b, i', I', R', k))
  ==> event(OutOfBandKeyComparisonSkipped(y, R', k))
  || (event(ClientChecksDHConfig(j, I', false)) && event(ClientChecksDHConfig(j', R', false))).
(* ✖︎ Expected result: false *)

query i,i',j,j': ChatID, a,b,x,y: Z, X,I,I',R,R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(b, i', I', R', k))
  ==> (I = I' && R = R')
  || (event(ClientChecksDHConfig(j, I', false)) && event(ClientChecksDHConfig(j', R', false))).
(* ✖︎ Expected result: false *)

query i,i',j,j': ChatID, a,b,x,y: Z, X,I,I',R,R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(b, i', I', R', k))
  ==> (I = I' && R = R')
  ||  event(OutOfBandKeyComparisonSkipped(y, R', k)).
(* ✖︎ Expected result: false *)

(*
 * If the clients do not necessarily validate their keys, then I, I', R, and R'
 * may be all different (even if the key is the same!).
 *)
query a,b,x: Z, i: ChatID, X,I,I',R,R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(b, i, I', R', k))
  ==> I = I' || R = R' || I = R' || R = I'
  || event(ClientChecksDHConfig(i, X, false)).
(* ✖︎ Expected result: false *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
  )

