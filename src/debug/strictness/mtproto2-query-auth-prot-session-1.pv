query nc, nc', ns, ns', nk, nk': Nonce, p, p': Modulus, g, g', gx, gx': G, x, x': Z, k: AuthKey, sk: PrivKey;
  event   (ClientAcceptsAuthKey(nc,  ns,  nk,  p,  g,  gx,  x,  k))
  && event(ServerAcceptsAuthKey(nc', ns', nk', p', g', gx', x', k))
  ==> event(ClientChecksDHParameters(nc, ns, nk, p, g, gx, false))
  ||  event(RevealedRSAKey(sk))
  ||  event(RevealedNk(nk)).
(* ✖︎ Expected result: false *)

query nc, nc', ns, ns', nk, nk': Nonce, p, p': Modulus, g, g', gx, gx': G, x, x': Z, k: AuthKey, sk: PrivKey;
  event   (ClientAcceptsAuthKey(nc,  ns,  nk,  p,  g,  gx,  x,  k))
  && event(ServerAcceptsAuthKey(nc', ns', nk', p', g', gx', x', k))
  ==> (nc = nc' && ns = ns' && nk = nk')
  ||  event(RevealedRSAKey(sk))
  ||  event(RevealedNk(nk)).
(* ✖︎ Expected result: false *)

query nc, nc', ns, ns', nk, nk': Nonce, p, p': Modulus, g, g', gx, gx': G, x, x': Z, k: AuthKey, sk: PrivKey;
  event   (ClientAcceptsAuthKey(nc,  ns,  nk,  p,  g,  gx,  x,  k))
  && event(ServerAcceptsAuthKey(nc', ns', nk', p', g', gx', x', k))
  ==> (nc = nc' && ns = ns' && nk = nk')
  ||  event(ClientChecksDHParameters(nc, ns, nk, p, g, gx, false))
  ||  event(RevealedNk(nk)).
(* ✖︎ Expected result: false *)

query nc, nc', ns, ns', nk, nk': Nonce, p, p': Modulus, g, g', gx, gx': G, x, x': Z, k: AuthKey, sk: PrivKey;
  event   (ClientAcceptsAuthKey(nc,  ns,  nk,  p,  g,  gx,  x,  k))
  && event(ServerAcceptsAuthKey(nc', ns', nk', p', g', gx', x', k))
  ==> (nc = nc' && ns = ns' && nk = nk')
  ||  event(ClientChecksDHParameters(nc, ns, nk, p, g, gx, false))
  ||  event(RevealedRSAKey(sk)).
(* ✖︎ Expected result: false *)


(* Main *)
process
  let allowWeakDiffieHellman = true in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, allowWeakDiffieHellman)
    | !GenGoodDHParameters()
    | !GenBadDHParameters()

    (* Allow the attacker to impersonate the server *)
    | !RevealRSAKey()

    (* Allow the attacker to learn any authorization key *)
    | !RevealAuthKey()
    (* …and register an authorization with the server for itself *)
    | !RegisterAuthKey()

    (* Allow the attacker to reveal (part of) the client's ephemeral state *)
    | !RevealNk()
    | !RevealAuthProtClientExponent()

    (* Allow the attacker to reveal the server's ephemeral key (the DH exponent) *)
    | !RevealAuthProtServerExponent()
  )

