query i, i': ChatID, X,Y,I,R: Principal, k: SessionKey, m: bitstring, a,b: Z;
  event(ClientReceivesSecretChatMsg(i, X, I, R, k, m))
  ==> event(ClientSendsSecretChatMsg(i', Y, R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(a, X, k)) && event(OutOfBandKeyComparisonSkipped(b, Y, k)))
  || (event(ClientChecksDHConfig(i, X, false)) && event(ClientChecksDHConfig(i', Y, false))).
(* ✖︎ Expected result: false *)

query i, i': ChatID, X,Y,I,R: Principal, k: SessionKey, m: bitstring, a,b: Z;
  event(ClientReceivesSecretChatMsg(i, X, I, R, k, m))
  ==> event(ClientSendsSecretChatMsg(i', Y, I, R, k, m))
  || (event(OutOfBandKeyComparisonSkipped(a, X, k)) && event(OutOfBandKeyComparisonSkipped(b, Y, k)))
  || (event(ClientChecksDHConfig(i, X, false)) && event(ClientChecksDHConfig(i', Y, false))).
(* ✖︎ Expected result: false *)

query i, i': ChatID, X,Y,I,R: Principal, k: SessionKey, m: bitstring, a,b: Z;
  event(ClientReceivesSecretChatMsg(i, X, I, R, k, m))
  ==> event(ClientSendsSecretChatMsg(i', Y, I, R, k, m))
  ||  event(ClientSendsSecretChatMsg(i', Y, R, I, k, m))
  || (event(ClientChecksDHConfig(i, X, false)) && event(ClientChecksDHConfig(i', Y, false))).
(* ✖︎ Expected result: false *)

query i, i': ChatID, X,Y,I,R: Principal, k: SessionKey, m: bitstring, a,b: Z;
  event(ClientReceivesSecretChatMsg(i, X, I, R, k, m))
  ==> event(ClientSendsSecretChatMsg(i', Y, I, R, k, m))
  ||  event(ClientSendsSecretChatMsg(i', Y, R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(a, X, k)) && event(OutOfBandKeyComparisonSkipped(b, Y, k))).
(* ✖︎ Expected result: false *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
  )

