query i: ChatID, X: Principal, Y: Principal, g_a: G;
  event(InitiatorSendsHalfKey(i, X, Y, g_a)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, g_b: G, fp: HashValue;
  event(InitiatorReceivesHalfKey(i, X, Y, g_b, fp)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(RekeyingKeyFingerprintMatches(i, X, Y, true)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(RekeyingKeyFingerprintMatches(i, X, Y, false)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, fp: HashValue;
  event(InitiatorSendsAck(i, X, Y, fp)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, k: SessionKey;
  event(InitiatorSendsMsgWithNewKey(i, X, Y, k)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, g_a: G;
  event(ResponderReceivesHalfKey(i, X, Y, g_a)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, fp: HashValue;
  event(ResponderReceivesAck(i, X, Y, fp)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, k: SessionKey;
  event(ResponderReceivesMsgWithNewKey(i, X, Y, k)).
(* ✖︎ Expected result: false *)

query iPID, rPID: ProcessID, i: ChatID, I, R: Principal, k: SessionKey, m: bitstring;
  inj-event(ResponderReceivesMsgWithNewKey(rPID,  i,    Alice, R, k, m))
  ==> inj-event(InitiatorSendsMsgWithNewKey(iPID, i, R, Alice, k, m)).
(* ✖︎ Expected result: false *)

query iPID, rPID: ProcessID, i: ChatID, I, R: Principal, k: SessionKey, m: bitstring;
  inj-event(ResponderReceivesMsgWithNewKey(rPID,  i, Alice, R, k, m))
  ==> inj-event(InitiatorSendsMsgWithNewKey(iPID, i, Alice, R, k, m)).
(* ✖︎ Expected result: false *)

(* Main *)
let Init() =
  new k: SessionKey;
  insert SecretChatClientTable(Alice, Bob, STRONG, GOOD, k);
  (* Weak parameters cause key fingerprint mismatches *)
  insert SecretChatClientTable(Alice, Bob, WEAK, GOOD, k);
  insert SecretChatClientTable(Alice, Bob, STRONG, BAD, k);
  new authKey1: AuthKey;
  new authKey2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, authKey1);
  insert AuthKeyClientTable(Bob, Server, authKey2);
  0.

process
  (0
    | Init()
    | !RekeyingInitiator(Server)
    | !RekeyingResponder(Server)
  )

