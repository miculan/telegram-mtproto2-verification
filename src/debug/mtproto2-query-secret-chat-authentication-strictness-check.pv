(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: ~2min
 *)

query xPID: ProcessID, yPID: ProcessID, i: ChatID, i': ChatID, X: Principal, Y: Principal, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> event(ClientSendsMessageToEncryptedChat(yPID, Y, i', R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(xPID, X, k)) && event(OutOfBandKeyComparisonSkipped(yPID, Y, k)))
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, i: ChatID, i': ChatID, X: Principal, Y: Principal, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> event(ClientSendsMessageToEncryptedChat(yPID, Y, i', I, R, k, m))
  || (event(OutOfBandKeyComparisonSkipped(xPID, X, k)) && event(OutOfBandKeyComparisonSkipped(yPID, Y, k)))
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, i: ChatID, i': ChatID, X: Principal, Y: Principal, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> event(ClientSendsMessageToEncryptedChat(yPID, Y, i', I, R, k, m))
  ||  event(ClientSendsMessageToEncryptedChat(yPID, Y, i', R, I, k, m))
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, i: ChatID, i': ChatID, X: Principal, Y: Principal, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> event(ClientSendsMessageToEncryptedChat(yPID, Y, i', I, R, k, m))
  ||  event(ClientSendsMessageToEncryptedChat(yPID, Y, i', R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(xPID, X, k)) && event(OutOfBandKeyComparisonSkipped(yPID, Y, k))).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, i: ChatID, X: Principal, Y: Principal, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(xPID, X, i, I, R, k, m))
  ==> event(ClientSendsMessageToEncryptedChat(yPID, Y, i, I, R, k, m))
  ||  event(ClientSendsMessageToEncryptedChat(yPID, Y, i, R, I, k, m))
  || (event(OutOfBandKeyComparisonSkipped(xPID, X, k)) && event(OutOfBandKeyComparisonSkipped(yPID, Y, k)))
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✖︎ Expected result: false *)
(*
 * NOTE: we cannot expect the chat IDs to match between sender and receiver, because
 * they are available to the server, who is free to use different IDs for communication
 * with each party. The above query becomes true if QRTableExtended is used
 * instead of QRTable.
 *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | !Init()
    | !SecretChatInitiator(Server, true)
    | !SecretChatResponder(Server, true)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
  )

