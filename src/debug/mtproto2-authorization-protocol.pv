query X: Principal, Y: Principal, nc: Nonce;
  event(ClientStartsSession(X, Y, nc)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, k: PubKey;
  event(ClientGetsServerPublicKey(X, Y, k)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce, nk: Nonce;
  event(ClientRequestsDHParameters(X, Y, nc, ns, nk)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_s: G;
  event(ClientReceivesDHParameters(X, Y, nc, ns, nk, p, g, g_s)).
(* ✖︎ Expected result: false *)

query event(ClientChecksDHParameters(true)).
(* ✖︎ Expected result: false *)

query event(ClientChecksDHParameters(false)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_s: G;
  event(ClientAcceptsDHParameters(X, Y, nc, ns, nk, p, g, g_s)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_s: G, g_a: G, k: AuthKey;
  event(ClientEndsDHExchange(X, Y, nc, ns, nk, p, g, g_s, g_a, k)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce, k: AuthKey;
  event(ClientAcceptsAuthKey(X, Y, nc, ns, k)).
(* ✖︎ Expected result: false *)

query X: Principal, Y: Principal, nc: Nonce, ns: Nonce;
  event(ClientReceivesAck(X, Y, nc, ns)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce;
  event(ServerReceivesRequest(X, nc)).
(* ✖︎ Expected result: false *)

query p: ProcessID, n: Nonce;
  event(ServerNonceIsRandom(p, n, false)).
(* ✖︎ Expected result: false *)

query p: ProcessID, n: Nonce;
  event(ServerNonceIsRandom(p, n, true)).
(* ✖︎ Expected result: false *)

query X: Principal;
  event(ServerUsesFixedNonce(X, true)).
(* ✖︎ Expected result: false *)

query X: Principal;
  event(ServerUsesFixedNonce(X, false)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce, ns: Nonce, nk: Nonce;
  event(ServerAcceptsClient(X, nc, ns, nk)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_s: G;
  event(ServerSendsDHParameters(X, nc, ns, nk, p, g, g_s)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce, ns: Nonce, nk: Nonce, p: Modulus, g: G, g_a: G, k: AuthKey;
  event(ServerEndsDHExchange(X, nc, ns, nk, p, g, g_a, k)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce, ns: Nonce, k: AuthKey;
  event(ServerAcceptsAuthKey(X, nc, ns, k)).
(* ✖︎ Expected result: false *)

query X: Principal, nc: Nonce, ns: Nonce, nk: Nonce;
  event(ServerSendsAck(X, nc, ns, nk)).
(* ✖︎ Expected result: false *)

query X: Principal;
  event(ForgedServerIdentity(X)).
(* ✖︎ Expected result: false *)

query k: PrivKey;
  event(CompromisedRSAKey(k)).
(* ✖︎ Expected result: false *)

query nk: Nonce;
  event(CompromisedNonce(nk)).
(* ✖︎ Expected result: false *)

query k: PrivKey;
  event(PostCompromisedRSAKey(k)).
(* ✖︎ Expected result: false *)

query nk: Nonce;
  event(PostCompromisedNonce(nk)).
(* ✖︎ Expected result: false *)

query k: AuthKey;
  event(PostCompromisedAuthKey(k)).
(* ✖︎ Expected result: false *)

query p: ProcessID, p': ProcessID, n: Nonce;
  event(ServerNonceIsRandom(p, n, false)) && event(ServerNonceIsRandom(p',n, false)) ==> p = p'.
(* ✖︎ Expected result: false (Correct! Different processes may reuse the same FIXED_NS) *)

query nk: Nonce, sk: PrivKey, k: AuthKey;
  event(PostCompromisedNonce(nk))
  ==> event(CompromisedNonce(nk))
  ||  event(CompromisedRSAKey(sk))
  ||  event(PostCompromisedAuthKey(k)).
(* ✖︎ Expected result: false (i.e., nk can be post-compromised without the other events being reached). *)


(* Main *)
process
  (0
    | !GenGoodDHParameters()
    | !GenBadDHParameters()
    | !GenRandomServerNonce()
    | !GenFixedServerNonce()
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, true)
    | !ForgeServerIdentity()
    | !LeakRSAKey()
    | !PostCompromiseRSAKey()
    | !LeakNk()
    | !PostCompromiseNk()
    | !PostCompromiseAuthKey()
  )

