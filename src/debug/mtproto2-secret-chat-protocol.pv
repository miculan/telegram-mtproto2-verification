query P: ProcessID, X: Principal;
  event(InitiatorRequestsDHConfig(P,X)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(InitiatorRequestsEncryptedChat(i,X,Y)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal, Y: Principal;
  event(InitiatorChecksDHConfig(P,X,Y,true)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal, Y: Principal;
  event(InitiatorChecksDHConfig(P,X,Y,false)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal;
  event(ClientChecksDHConfig(P,X,true)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal;
  event(ClientChecksDHConfig(P,X,false)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(SessionKeyFingerprintMatches(i,X,Y,true)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(SessionKeyFingerprintMatches(i,X,Y,false)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, k: SessionKey;
  event(InitiatorHasSessionKeyForEncryptedChat(i,X,Y,k)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal, g_a: G;
  event(ResponderReceivesRequestForEncryptedChat(i,X,Y,g_a)).
(* ✖︎ Expected result: false *)

query i: ChatID, X: Principal, Y: Principal;
  event(ResponderAcceptsInitiator(i,X,Y)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal, Y: Principal;
  event(ResponderChecksDHConfig(P,X,Y,true)).
(* ✖︎ Expected result: false *)

query P: ProcessID, X: Principal, Y: Principal;
  event(ResponderChecksDHConfig(P,X,Y,false)).
(* ✖︎ Expected result: false *)

query  i: ChatID, X: Principal, Y: Principal, k: SessionKey;
  event(ResponderHasSessionKeyForEncryptedChat(i,X,Y,k)).
(* ✖︎ Expected result: false *)

query  i: ChatID, X: Principal, Y: Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i,X,Y,k)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, X: Principal, Y: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSucceeded(P,X,Y,k)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, X: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSkipped(P,X,k)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, i: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientSendsMessageToEncryptedChat(P,X,i,X,Y,k,m)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, i: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientSendsMessageToEncryptedChat(P,Y,i,X,Y,k,m)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, i: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(P,X,i,X,Y,k,m)).
(* ✖︎ Expected result: false *)

query  P: ProcessID, i: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(P,Y,i,X,Y,k,m)).
(* ✖︎ Expected result: false *)

query rPID: ProcessID, iPID: ProcessID, i: ChatID, I: Principal, R: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(rPID, R, i, I, R, k, m))
  && event(OutOfBandKeyComparisonSucceeded(rPID, R, I, k))
  && event(ResponderChecksDHConfig(rPID, I, R, true))
  && event(InitiatorChecksDHConfig(iPID, I, R, true)).
(* ✖︎ Expected result: false (i.e., the events are reachable) *)

query rPID: ProcessID, iPID: ProcessID, i: ChatID, I: Principal, R: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(iPID, I, i, I, R, k, m))
  && event(OutOfBandKeyComparisonSucceeded(iPID, I, R, k))
  && event(ResponderChecksDHConfig(rPID, I, R, true))
  && event(InitiatorChecksDHConfig(iPID, I, R, true)).
(* ✖︎ Expected result: false (i.e., the events are reachable) *)

query attacker(new iSecretChatText).
(* ✖︎ Expected result: false *)

query attacker(new rSecretChatText).
(* ✖︎ Expected result: false *)

query p: ProcessID, X: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(p,X,k)).
(* ✖︎ Expected result: false *)

query p: ProcessID, X: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(p,X,k)).
(* ✖︎ Expected result: false *)

query p: ProcessID, X: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(ClientChecksDHConfig(p, X, false)).
(* ✖︎ Expected result: false *)

query p: ProcessID, X: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(ClientChecksDHConfig(p, X, false)).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, X: Principal, Y: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSucceeded(yPID, Y, X, k))
  ==> k <> group2sess(BAD).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, X: Principal, Y: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSucceeded(xPID, X, Y, k))
  ==> k <> group2sess(BAD).
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I: Principal, R: Principal, I': Principal, R': Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i, R, I, k))
  && event(InitiatorAcceptsEncryptedChat(i', I', R', k)).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, yPID: ProcessID, X: Principal, Y: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSucceeded(yPID, Y, X, k))
  ==> k <> group2sess(BAD)
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✔︎ Expected result: true *)

query xPID: ProcessID, yPID: ProcessID, X: Principal, Y: Principal, k: SessionKey;
  event(OutOfBandKeyComparisonSucceeded(xPID, X, Y, k))
  ==> k <> group2sess(BAD)
  || (event(ClientChecksDHConfig(xPID, X, false)) && event(ClientChecksDHConfig(yPID, Y, false))).
(* ✔︎ Expected result: true *)

query p: ProcessID, id: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(p,X,id,X,Y,k,m))
  ==> event(OutOfBandKeyComparisonSucceeded(p,X,Y,k))
  ||  event(OutOfBandKeyComparisonSkipped(p,X,k)).
(* ✖︎ Expected result: true *)

query p: ProcessID, id: ChatID, X: Principal, Y: Principal, k: SessionKey, m: bitstring;
  event(ClientReceivesMessageInEncryptedChat(p,Y,id,X,Y,k,m))
  ==> event(OutOfBandKeyComparisonSucceeded(p,Y,X,k))
  ||  event(OutOfBandKeyComparisonSkipped(p,Y,k)).
(* ✖︎ Expected result: true *)


(* Main *)
let Init() =
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | Init()
    | !SecretChatInitiator(Server, true)
    | !SecretChatResponder(Server, true)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
  )

