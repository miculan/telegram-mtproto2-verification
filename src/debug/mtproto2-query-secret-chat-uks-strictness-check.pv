(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: ~45s
 *)

query xPID: ProcessID, X: Principal, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  ||  event(ClientChecksDHConfig(xPID, X, false)).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, X: Principal, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  || event(OutOfBandKeyComparisonSkipped(xPID, X, k)).
(* ✖︎ Expected result: false *)

query xPID: ProcessID, X: Principal, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R') || (I = R' && R = I').
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(i', I', R', k))
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I', k))
  ||  event(OutOfBandKeyComparisonSkipped(rPID, R', k))
  || (event(ClientChecksDHConfig(iPID, I', false)) && event(ClientChecksDHConfig(rPID, R', false))).
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  ||  event(OutOfBandKeyComparisonSkipped(rPID, R, k))
  || (event(ClientChecksDHConfig(iPID, I', false)) && event(ClientChecksDHConfig(rPID, R', false))).
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i, I, R, k))
  && event(InitiatorAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  ||  event(OutOfBandKeyComparisonSkipped(iPID, I', k))
  || (event(ClientChecksDHConfig(iPID, I, false)) && event(ClientChecksDHConfig(rPID, R, false))).
(* Expected result: cannot be proved *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i, I, R, k))
  && event(InitiatorAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  ||  event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || (event(ClientChecksDHConfig(iPID, I, false)) && event(ClientChecksDHConfig(rPID, R, false))).
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i, I, R, k))
  && event(InitiatorAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R')
  || event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || event(OutOfBandKeyComparisonSkipped(rPID, R, k)).
(* ✖︎ Expected result: false *)

query  iPID, rPID: ProcessID, i, i': ChatID, I, I', R, R': Principal, k: SessionKey;
  event(ResponderAcceptsEncryptedChat(i, I, R, k))
  && event(InitiatorAcceptsEncryptedChat(i', I', R', k))
  ==> (I = I' && R = R' && i = i')
  ||  event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  ||  event(OutOfBandKeyComparisonSkipped(rPID, R, k))
  || (event(ClientChecksDHConfig(iPID, I, false)) && event(ClientChecksDHConfig(rPID, R, false))).
(* ✖︎ Expected result: false *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | !Init()
    | !SecretChatInitiator(Server, true)
    | !SecretChatResponder(Server, true)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
  )

