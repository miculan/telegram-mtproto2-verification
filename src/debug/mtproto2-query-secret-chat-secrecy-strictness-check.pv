(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: ~2min
 *)

query attacker(new iSecretChatText).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || event(OutOfBandKeyComparisonSkipped(rPID, R, k)).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(ResponderChecksDHConfig(rPID, I, R, false))
  ||  event(InitiatorChecksDHConfig(iPID, I, R, false)).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || (event(ResponderChecksDHConfig(rPID, I, R, false)) && event(InitiatorChecksDHConfig(iPID, I, R, true))).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || (event(ResponderChecksDHConfig(rPID, I, R, true)) && event(InitiatorChecksDHConfig(iPID, I, R, false))).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> (event(OutOfBandKeyComparisonSkipped(iPID, I, k)) && event(OutOfBandKeyComparisonSkipped(rPID, R, k)))
  ||  (event(ResponderChecksDHConfig(rPID, I, R, false)) && event(InitiatorChecksDHConfig(iPID, I, R, false))).
(* ✖︎ Expected result: false *)
(*
 * NOTE: the attacker may play the role of the initiator (resp., the responder)
 * and start a chat with an honest responder (resp., initiator) who does not
 * check the DH parameters.
 *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new iSecretChatText)
  ==> (event(OutOfBandKeyComparisonSkipped(iPID, I, k)) && event(OutOfBandKeyComparisonSkipped(rPID, R, k)))
  ||   event(ResponderChecksDHConfig(rPID, I, R, false)).
(* ✖︎ Expected result: false *)


query attacker(new rSecretChatText).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || event(OutOfBandKeyComparisonSkipped(rPID, R, k)).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(ResponderChecksDHConfig(rPID, I, R, false))
  ||  event(InitiatorChecksDHConfig(iPID, I, R, false)).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || (event(ResponderChecksDHConfig(rPID, I, R, false)) && event(InitiatorChecksDHConfig(iPID, I, R, true))).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> event(OutOfBandKeyComparisonSkipped(iPID, I, k))
  || (event(ResponderChecksDHConfig(rPID, I, R, true)) && event(InitiatorChecksDHConfig(iPID, I, R, false))).
(* ✖︎ Expected result: false *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> (event(OutOfBandKeyComparisonSkipped(iPID, I, k)) && event(OutOfBandKeyComparisonSkipped(rPID, R, k)))
  ||  (event(ResponderChecksDHConfig(rPID, I, R, false)) && event(InitiatorChecksDHConfig(iPID, I, R, false))).
(* ✖︎ Expected result: false *)
(*
 * NOTE: the attacker may play the role of the initiator (resp., the responder)
 * and start a chat with an honest responder (resp., initiator) who does not
 * check the DH parameters.
 *)

query iPID: ProcessID, rPID: ProcessID, I: Principal, R: Principal, k: SessionKey;
  attacker(new rSecretChatText)
  ==> (event(OutOfBandKeyComparisonSkipped(iPID, I, k)) && event(OutOfBandKeyComparisonSkipped(rPID, R, k)))
  ||   event(InitiatorChecksDHConfig(iPID, I, R, false)).
(* ✖︎ Expected result: false *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | !Init()
    | !SecretChatInitiator(Server, true)
    | !SecretChatResponder(Server, true)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
  )

