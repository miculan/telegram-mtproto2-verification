(*
 * MTProto 2.0: Cloud chats
 *
 * Model for the protocol used to exchange client-server messages (cloud chats)
 * using the long-term keys shared between a client and Telegram's server.
 *
 * See: https://core.telegram.org/mtproto/description
 *
 * Expected time to run this script: ~1s
 *)

(*
 * The secrecy of a message should be preserved for sessions that executed
 * correctly even if some information is revealed after the session has
 * completed (perfect forward secrecy).
 *
 * This query shows that no PFS is guaranteed in cloud chats.
 *)
query s: Nonce, m: bitstring, k: AuthKey, nk: Nonce, a,b: Z, sk: PrivKey;
  event(ClientReceivesCloudMessage(s, m, k))
  && attacker(m)
  ==> event(PostCompromisedAuthKey(k))
  ||  event(PostCompromisedRSAKey(sk))
  || (event(PostCompromisedNk(nk)) && event(PostCompromisedAuthProtClientExponent(b)))
  || (event(PostCompromisedNk(nk)) && event(PostCompromisedAuthProtServerExponent(a)))
  || (event(PostCompromisedAuthProtClientExponent(b)) && event(PostCompromisedAuthProtServerExponent(a))).
(* ✔︎ Expected result: true *)


(* Main *)

process
  let weakDiffieHellman = false in
  (0
    | !RegisterRSAKey(Server)
    | !ServerAuth(Server)
    | !ClientAuth(Server, weakDiffieHellman)
    | !ServerCloudChat()
    | !ClientCloudChat(Server)
    | !GenGoodDHParameters()
    (* Post-compromise attacks *)
    | !PostCompromiseRSAKey()
    | !PostCompromiseAuthKey()
    | !PostCompromiseNk()
    | !PostCompromiseAuthProtClientExponent()
    | !PostCompromiseAuthProtServerExponent()
  )

