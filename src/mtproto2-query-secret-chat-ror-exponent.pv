(*
 * MTProto 2.0: Secret Chats
 *
 * Expected time to run this script: ~1min
 *)

set ignoreTypes = false.

let RealOrRandomExponent() =
  get SecretChatClientTable(iUser, rUser, p, g, x, sessionKey) in
  if (iUser = Alice || iUser = Bob ) && (rUser = Alice || rUser = Bob) && sessionKey <> group2sess(BAD) then
    new z: Z;
    out(io, choice[x, z]).
(* Expected result: cannot be proved *)
(*
 * NOTE: the attacker (the server) should be able to distinguish a session key
 * or an exponent by comparing key fingerprints. So, the above observational
 * equivalence does not actually hold.
 *
 * More specifically, the trace output by running this query shows the following:
 *
 * - Alice sends Bob g^a;
 * - Bob sends Alice g^b together with a hash hash(k) of the key k = g^ab.
 *
 * The server acts as a forwarder, so it learns g^a, g^b, and hash(k). At the
 * end of the protocol, the server gets, say, choice[a,z] (for some random z).
 * Then, the server compares hash((g^a)^choice[a,z]) and hash(k), which allows
 * the server to tell apart a from z with high probability.
 *)


(* Main *)

(*
 * Needed to bootstrap the secret chat's processes.
 *)
let Init() =
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  (0
    | !Init()
    | !SecretChatInitiator(Server, false)
    | !SecretChatResponder(Server, false)
    | !PerformOutOfBandKeyComparison()
    | RealOrRandomExponent()
  )

