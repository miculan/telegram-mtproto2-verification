(*
 * MTProto 2.0: Rekeying
 *
 * Model for the protocol used for updating the session keys of secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end/pfs
 *
 * Expected time to run this script: ~30s
 *)

(*
 * If an (honest) initiator I accepts a new key k with Bob (who is honest by
 * definition) in some session, and an (honest) responder R accepts the same
 * key k with Alice (who is honest by definition) in some other session, then
 * the session is the same, the initiator is Alice and the responder is Bob.
 *)
query i, i': ChatID, I, R: Principal, k: SessionKey;
  event(InitiatorHasNegotiatedNewKey   (i,  I,     Bob, k))
  && event(ResponderHasNegotiatedNewKey(i', Alice, R,   k))
  ==> i = i' && I = Alice && R = Bob.
(* ✔︎ Expected result: true *)
(*
 * NOTE: the above query (together with the failure of the query in
 * mtproto2-query-rekeying-authentication-failure.pv) shows that we can expect
 * authentication in the rekeying protocol only if the clients are all honest.
 * In the query above, Alice and Bob are honest by definition; I is honest
 * because it is the user running RekeyingInitiator() (which is an honest
 * process by definition); similarly, R is honest because it is the user
 * running RekeyingResponder().
 *)


(* Main *)

let Init() =
  new authKey1: AuthKey;
  new authKey2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, authKey1);
  insert AuthKeyClientTable(Bob, Server, authKey2);
  new a: Z;
  new b: Z;
  new i: ChatID;
  let k = genStrongSessionKey(a,b) in
  insert SecretChatClientTable(Alice, Alice, Bob, STRONG, GOOD, a, i, k);
  insert SecretChatClientTable(Bob, Alice, Bob, STRONG, GOOD, b, i, k);
  0.

process
  (0
    | !Init()
    | !RegisterSessionKey()
    | !RekeyingInitiator(Server)
    | !RekeyingResponder(Server)
    | !RekeyingSend(Server)
    | !RekeyingReceive(Server)
  )

