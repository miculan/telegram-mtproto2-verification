(*
 * MTProto 2.0: Rekeying
 *
 * Model for the protocol used for updating the session keys of secret
 * chats.
 *
 * See: https://core.telegram.org/api/end-to-end/pfs
 *)

(* set preciseActions = true. *)

query k: SessionKey, a,b: Z, I,R: Principal, i: ChatID;
  event(InitiatorHasNegotiatedNewKey(i, I, R, k))
  && attacker(k)
  ==> (event(PostCompromisedRekeyingInitiatorEphemeralKey(a)) && event(PostCompromisedRekeyingResponderEphemeralKey(b))).
(* ✔︎ Result: true *)


query k: SessionKey, m: bitstring, x,a,b: Z, X,I,R: Principal, i: ChatID;
  event(ClientSendsMessageWithNewKey(x, X, i, I, R, k, m))
  && attacker(m)
  ==> (event(PostCompromisedRekeyingInitiatorEphemeralKey(a)) && event(PostCompromisedRekeyingResponderEphemeralKey(b))).
(* ✔︎ Result: true *)

(* Main *)

let Init() =
  new a: Z;
  new b: Z;
  new i: ChatID;
  let k = genStrongSessionKey(a,b) in
  new authKey1: AuthKey;
  new authKey2: AuthKey;
  insert SecretChatClientTable(Alice, Alice, Bob, STRONG, GOOD, a, i, k, authKey1);
  insert SecretChatClientTable(Bob, Alice, Bob, STRONG, GOOD, b, i, k, authKey2);
  insert AuthKeyClientTable(Alice, Server, authKey1);
  insert AuthKeyClientTable(Bob, Server, authKey2);
  0.

process
  let allowWeakDiffieHellman = false in
  (0
    | Init()
    (* | !SecretChatInitiator(Server, allowWeakDiffieHellman) *)
    (* | !SecretChatResponder(Server, allowWeakDiffieHellman) *)
    (* | !PerformOutOfBandKeyComparison() *)
    (* | !SkipOutOfBandKeyComparison() *)
    | !RekeyingInitiator()
    | !RekeyingResponder()
    | !RekeyingSend()
    | !RekeyingReceive()
    (* | !RevealRekeyingInitiatorEphemeralKey() *)
    (* | !RevealRekeyingResponderEphemeralKey() *)
    | !PostCompromiseRekeyingInitiatorEphemeralKey()
    | !PostCompromiseRekeyingResponderEphemeralKey()
  )

