(*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used to in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 *
 * Expected time to run this script: <1s
 *
 *)

(*
 * A slight generalization of mtproto2-query-secret-chat-authentication-3.pv.
 *
 * If an (honest) initiator I negotiates a session key k to chat with R, and an
 * (honest) responder R' negotiates the same key k to chat with I', then there
 * are only two parties involved, unless the clients skip the out-of-band
 * validation of k.
 *)
query i,i': ChatID, a,b,x: Z, X,I,I',R,R': Principal, k: SessionKey;
  event(InitiatorAcceptsEncryptedChat(a, i, I, R, k))
  && event(ResponderAcceptsEncryptedChat(b, i', I', R', k))
  ==> (I = I' && R = R')
  ||  (I = R' && R = I')
  ||  event(OutOfBandKeyComparisonSkipped(x, X, k)).
(* ✔︎ Expected result: true *)


(* Main *)

let Init() =
  (*
   * Authorization keys are not used in our model of the secret chat protocol,
   * because we include the server in the attacker's model. The following,
   * however, is needed for the chat processes to proceed.
   *)
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = true in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !PerformOutOfBandKeyComparison()
    | !SkipOutOfBandKeyComparison()
    | !SecretChatSend(Server)
    | !SecretChatReceive(Server)
  )

