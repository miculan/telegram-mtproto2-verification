(*
 * MTProto 2.0: Secret Chats
 *
 * Expected time to run this script: ~20s
 *)

(* set ignoreTypes = false. *)

let SecretChatReceiveRoR(server: Principal) =
  get SecretChatClientTable(X, iUser, rUser, p, g, x, i, k) in
  get AuthKeyClientTable(=X, =server, authKey) in

  in(io, c: Message);
  let CHAT(m) = decodeSecretChatMsg(c, k, authKey) in

  if (iUser = Alice || iUser = Bob ) && (rUser = Alice || rUser = Bob) && k <> group2sess(BAD) then
    new r: bitstring;
    out(io, choice[m, r]);
    0.
(* Expected result: cannot be proved *)
(*
 * NOTE: the derivation does not appear to indicate that indistinguishability
 * does not hold.
 *)


(* Main *)

(*
 * Needed to bootstrap the secret chat's processes.
 *)
let Init() =
  new k1: AuthKey;
  new k2: AuthKey;
  insert AuthKeyClientTable(Alice, Server, k1);
  insert AuthKeyClientTable(Bob, Server, k2);
  0.

process
  let allowWeakDiffieHellman = false in
  (0
    | !Init()
    | !SecretChatInitiator(Server, allowWeakDiffieHellman)
    | !SecretChatResponder(Server, allowWeakDiffieHellman)
    | !SecretChatSend(Server)
    | !SecretChatReceiveRoR(Server)
    | !PerformOutOfBandKeyComparison()
  )

